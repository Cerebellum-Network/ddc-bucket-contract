{
  "source": {
    "hash": "0x1caf5ce3e145731b738594770e25507ba8c09066f63328d913f96cb72ad1ba5d",
    "language": "ink! 3.4.0",
    "compiler": "rustc 1.69.0-nightly"
  },
  "contract": {
    "name": "ddc_bucket",
    "version": "0.5.2",
    "authors": [
      "Aur√©lien Nicolas <aurel@cere.network>"
    ],
    "description": "DDC v2 Smart Contracts -- Orchestrate the network around clusters and buckets",
    "license": "Apache-2.0"
  },
  "V3": {
    "spec": {
      "constructors": [
        {
          "args": [],
          "docs": [
            "Create a new contract.",
            "",
            "The caller will be admin of the contract."
          ],
          "label": "new",
          "payable": false,
          "selector": "0x9bae9d5e"
        }
      ],
      "docs": [],
      "events": [
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "owner_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " A bucket was created. The given account is its first owner and payer of resources."
          ],
          "label": "BucketCreated"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "resource",
              "type": {
                "displayName": [
                  "Resource"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Some amount of resources of a cluster were allocated to a bucket."
          ],
          "label": "BucketAllocated"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " The due costs of a bucket was settled from the bucket payer to the cluster."
          ],
          "label": "BucketSettlePayment"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "public_availability",
              "type": {
                "displayName": [
                  "bool"
                ],
                "type": 3
              }
            }
          ],
          "docs": [
            " The availiablity of the bucket was updated."
          ],
          "label": "BucketAvailabilityUpdated"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "bucket_params",
              "type": {
                "displayName": [
                  "BucketParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [],
          "label": "BucketParamsSet"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "manager_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "cluster_params",
              "type": {
                "displayName": [
                  "ClusterParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [],
          "label": "ClusterCreated"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "v_nodes",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 27
              }
            }
          ],
          "docs": [],
          "label": "ClusterNodeAdded"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "ClusterNodeRemoved"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "ClusterCdnNodeAdded"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "ClusterCdnNodeRemoved"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "cluster_params",
              "type": {
                "displayName": [
                  "ClusterParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [],
          "label": "ClusterParamsSet"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [],
          "label": "ClusterRemoved"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "status",
              "type": {
                "displayName": [
                  "NodeStatusInCluster"
                ],
                "type": 23
              }
            }
          ],
          "docs": [],
          "label": "ClusterNodeStatusSet"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "status",
              "type": {
                "displayName": [
                  "NodeStatusInCluster"
                ],
                "type": 23
              }
            }
          ],
          "docs": [],
          "label": "ClusterCdnNodeStatusSet"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "v_nodes",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 27
              }
            }
          ],
          "docs": [
            " A vnode was re-assigned to new node."
          ],
          "label": "ClusterNodeReplaced"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "v_nodes",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 27
              }
            }
          ],
          "docs": [
            " A vnode was re-assigned to new node."
          ],
          "label": "ClusterNodeReset"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "resource",
              "type": {
                "displayName": [
                  "Resource"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Some resources were reserved for the cluster from the nodes."
          ],
          "label": "ClusterReserveResource"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "provider_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " The share of revenues of a cluster for a provider was distributed."
          ],
          "label": "ClusterDistributeRevenues"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "provider_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "ClusterDistributeCdnRevenues"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "provider_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "cdn_node_params",
              "type": {
                "displayName": [
                  "CdnNodeParams"
                ],
                "type": 13
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "undistributed_payment",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            }
          ],
          "docs": [
            " A node was created. The given account is its owner and recipient of revenues."
          ],
          "label": "CdnNodeCreated"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "CdnNodeRemoved"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "cdn_node_params",
              "type": {
                "displayName": [
                  "CdnNodeParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [],
          "label": "CdnNodeParamsSet"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "provider_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "rent_v_node_per_month",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "node_params",
              "type": {
                "displayName": [
                  "NodeParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " A node was created. The given account is its owner and recipient of revenues."
          ],
          "label": "NodeCreated"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "NodeRemoved"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "node_params",
              "type": {
                "displayName": [
                  "NodeParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [],
          "label": "NodeParamsSet"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "account_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "value",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            }
          ],
          "docs": [
            " Tokens were deposited on an account."
          ],
          "label": "Deposit"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "account_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "permission",
              "type": {
                "displayName": [
                  "Permission"
                ],
                "type": 75
              }
            }
          ],
          "docs": [
            " A permission was granted to the account."
          ],
          "label": "PermissionGranted"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "account_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": false,
              "label": "permission",
              "type": {
                "displayName": [
                  "Permission"
                ],
                "type": 75
              }
            }
          ],
          "docs": [
            " A permission was revoked from the account."
          ],
          "label": "PermissionRevoked"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "account_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "NodeOwnershipTransferred"
        },
        {
          "args": [
            {
              "docs": [],
              "indexed": true,
              "label": "account_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "docs": [],
              "indexed": true,
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "CdnNodeOwnershipTransferred"
        }
      ],
      "messages": [
        {
          "args": [
            {
              "label": "bucket_params",
              "type": {
                "displayName": [
                  "BucketParams"
                ],
                "type": 13
              }
            },
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "owner_id",
              "type": {
                "displayName": [
                  "Option"
                ],
                "type": 41
              }
            }
          ],
          "docs": [
            " Create a new bucket and return its `bucket_id`.",
            "",
            " The caller will be its first owner and payer of resources.",
            "",
            " `bucket_params` is configuration used by clients and nodes. See the [data structure of BucketParams](https://docs.cere.network/ddc/protocols/contract-params-schema)",
            "",
            " The bucket can be connected to a single cluster (currently). Allocate cluster resources with the function `bucket_alloc_into_cluster`"
          ],
          "label": "bucket_create",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 42
          },
          "selector": "0x0aeb2379"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "owner_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Change owner of the bucket",
            "",
            " Provide the account of new owner"
          ],
          "label": "bucket_change_owner",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xc7d0c2cd"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "resource",
              "type": {
                "displayName": [
                  "Resource"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Allocate some resources of a cluster to a bucket.",
            "",
            " The amount of resources is given per vnode (total resources will be `resource` times the number of vnodes)."
          ],
          "label": "bucket_alloc_into_cluster",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x4c482d19"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Settle the due costs of a bucket from its payer account to the cluster account."
          ],
          "label": "bucket_settle_payment",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x15974555"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "params",
              "type": {
                "displayName": [
                  "BucketParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " Change the `bucket_params`, which is configuration used by clients and nodes.",
            "",
            " See the [data structure of BucketParams](https://docs.cere.network/ddc/protocols/contract-params-schema)"
          ],
          "label": "bucket_change_params",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x9f2d075b"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Get the current status of a bucket."
          ],
          "label": "bucket_get",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 46
          },
          "selector": "0x3802cb77"
        },
        {
          "args": [
            {
              "label": "offset",
              "type": {
                "displayName": [
                  "u32"
                ],
                "type": 6
              }
            },
            {
              "label": "limit",
              "type": {
                "displayName": [
                  "u32"
                ],
                "type": 6
              }
            },
            {
              "label": "filter_owner_id",
              "type": {
                "displayName": [
                  "Option"
                ],
                "type": 41
              }
            }
          ],
          "docs": [
            " Iterate through all buckets.",
            "",
            " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
            " The optimal `limit` depends on the size of params.",
            "",
            " The results can be filtered by owner. Note that paging must still be completed fully."
          ],
          "label": "bucket_list",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [],
            "type": 49
          },
          "selector": "0x417ab584"
        },
        {
          "args": [
            {
              "label": "owner_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Iterate through all buckets and return only those owned by owner",
            "",
            " This method returns bucket struct, not the status"
          ],
          "label": "bucket_list_for_account",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 51
          },
          "selector": "0xc434cf57"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "public_availability",
              "type": {
                "displayName": [
                  "bool"
                ],
                "type": 3
              }
            }
          ],
          "docs": [
            " Set availiablity of the bucket"
          ],
          "label": "bucket_set_availability",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x053eb3ce"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "new_resource_cap",
              "type": {
                "displayName": [
                  "Resource"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Set max resource cap to be charged by CDN for public bucket"
          ],
          "label": "bucket_set_resource_cap",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x85010c6d"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Set permission for the reader of the bucket"
          ],
          "label": "get_bucket_writers",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 15
          },
          "selector": "0x499cd4b7"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "writer",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Set permission for the writer of the bucket"
          ],
          "label": "bucket_set_writer_perm",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xea2e477a"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "writer",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Revoke permission for the writer of the bucket"
          ],
          "label": "bucket_revoke_writer_perm",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x2b3d8dd1"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Set permission for the reader of the bucket"
          ],
          "label": "get_bucket_readers",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 15
          },
          "selector": "0xb9a7cc1c"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "reader",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Set permission for the reader of the bucket"
          ],
          "label": "bucket_set_reader_perm",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xfc0e94ea"
        },
        {
          "args": [
            {
              "label": "bucket_id",
              "type": {
                "displayName": [
                  "BucketId"
                ],
                "type": 6
              }
            },
            {
              "label": "writer",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Revoke permission for the reader of the bucket"
          ],
          "label": "bucket_revoke_reader_perm",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xe9bfed5a"
        },
        {
          "args": [
            {
              "label": "cluster_params",
              "type": {
                "displayName": [
                  "ClusterParams"
                ],
                "type": 13
              }
            },
            {
              "label": "resource_per_v_node",
              "type": {
                "displayName": [
                  "Resource"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Creates a cluster of Storage nodes and CDN nodes.",
            "",
            " This endpoint creates a cluster of Storage nodes and CDN nodes with specific parameters.",
            " The caller will be the cluster manager (cluster owner). In order to add a Storage or CDN node, the manager must be authorized by the node owner using the `trust_manager` endpoint or be the node owner.",
            "",
            " # Parameters",
            "",
            " * `cluster_params` - [Cluster parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#cluster-parameters) in protobuf format.",
            " * `resource_per_v_node` - Resource value that will be allocated for every virtual node in the cluster.",
            "",
            " # Output",
            "",
            " Returns ID of the created cluster.",
            "",
            " # Events",
            "",
            " * `ClusterCreated` event on successful cluster creation.",
            "",
            " # Errors",
            "",
            " * `InvalidClusterParams` error if there is an invalid cluster parameter. "
          ],
          "label": "cluster_create",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 42
          },
          "selector": "0x4c0f21f6"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "v_nodes",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 27
              }
            }
          ],
          "docs": [
            " Adds a Storage node to the targeting cluster.",
            "",
            " This endpoint adds a physical Storage node along with its virtual nodes to the targeting cluster.",
            " Virtual nodes determines a token (position) on the ring in terms of Consistent Hashing.",
            " The Storage node can be added to the cluster by cluster manager only.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `node_key` - Public Key associated with the Storage node.",
            " * `v_nodes` - List of tokens (positions) related to the Storage node.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterNodeAdded` event on successful Storage node addition.",
            "",
            " # Errors",
            "",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `OnlyTrustedClusterManager` error if the caller is not a trusted cluster manager.",
            " * `NodeDoesNotExist` error if the adding Storage node does not exist.",
            " * `NodeIsAddedToCluster(ClusterId)` error if the adding Storage node is already added to this or another cluster.",
            " * `AtLeastOneVNodeHasToBeAssigned(ClusterId, NodeKey)` error if there is a Storage node without any virtual nodes in the cluster.",
            " * `VNodesSizeExceedsLimit` error if virtual nodes length exceeds storage capacity.",
            " * `InsufficientNodeResources` - error if there is not enough resources in a physical node."
          ],
          "label": "cluster_add_node",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xf7496bdc"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Removes a Storage node from the targeting cluster.",
            "",
            " This endpoint removes a physical Storage node along with its virtual nodes from the targeting cluster.",
            " The Storage node can be removed from the cluster either by cluster manager or by the node owner.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `node_key` - Public Key associated with the Storage node.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterNodeRemoved` event on successful Storage node removal.",
            "",
            " # Errors",
            "",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `OnlyClusterManagerOrNodeProvider` error if the caller is not the cluster manager or node owner.",
            " * `NodeDoesNotExist` error if the removing Storage node does not exist.",
            " * `NodeIsNotAddedToCluster(ClusterId)` error if the removing Storage node is not in this cluster."
          ],
          "label": "cluster_remove_node",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x793e0778"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "v_nodes",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 27
              }
            },
            {
              "label": "new_node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Reasignes existing virtual nodes in the targeting cluster.",
            "",
            " This endpoint reasignes existing virtual nodes to another physical Storage node within the same cluster.",
            " All specifying virtual nodes must pre-exist in the cluster and the new physical Storage node must be added to the cluster preliminary.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `v_nodes` - List of tokens (positions) to reasign for the new physical Storage node.",
            " * `new_node_key` - Public Key associated with the Storage node that is being reasigned to the specified virtual nodes.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterNodeReplaced` event on successful virtual node reassignment.",
            "",
            " # Errors",
            "",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `OnlyClusterManager` error if the caller is not the cluster manager.",
            " * `NodeDoesNotExist` error if the new Storage node does not exist.",
            " * `NodeIsNotAddedToCluster(ClusterId)` error if the new Storage node is not added to this cluster.",
            " * `NodeIsAddedToCluster(ClusterId)` error if the new Storage node is in another cluster.",
            " * `VNodeIsNotAssignedToNode(ClusterId, VNodeToken)` error if the there is some virtual node that is being reasigned, but this virtual node is not assigned to any physical node.",
            " * `VNodeIsAlreadyAssignedToNode(NodeKey)` - error if there is some virtual node that is already assigned to other physical node within the same cluster.",
            " * `AtLeastOneVNodeHasToBeAssigned(ClusterId, NodeKey)` error if there is a Storage node without any virtual nodes in the cluster.",
            " * `VNodesSizeExceedsLimit` error if virtual nodes length exceeds storage capacity."
          ],
          "label": "cluster_replace_node",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x48194ab1"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "new_v_nodes",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 27
              }
            }
          ],
          "docs": [
            " Reeset a Storage node in the targeting cluster.",
            "",
            " This endpoint resets virtual nodes on a physical Storage node in the targeting cluster.",
            " Virtual nodes determines a token (position) on the ring in terms of Consistent Hashing.",
            " The Storage node can be reset in the cluster by cluster manager only.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `node_key` - Public Key associated with the Storage node.",
            " * `new_v_nodes` - List of tokens (positions) related to the Storage node to reset.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterNodeAdded` event on successful Storage node addition.",
            "",
            " # Errors",
            "",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `OnlyTrustedClusterManager` error if the caller is not a trusted cluster manager.",
            " * `NodeDoesNotExist` error if the adding Storage node does not exist.",
            " * `NodeIsAddedToCluster(ClusterId)` error if the adding Storage node is already added to this or another cluster.",
            " * `AtLeastOneVNodeHasToBeAssigned(ClusterId, NodeKey)` error if there is a Storage node without any virtual nodes in the cluster.",
            " * `VNodesSizeExceedsLimit` error if virtual nodes length exceeds storage capacity.",
            " * `InsufficientNodeResources` - error if there is not enough resources in a physical node."
          ],
          "label": "cluster_reset_node",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xa78b2e19"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Adds a CDN node to the targeting cluster.",
            "",
            " This endpoint adds a CDN node to the targeting cluster.",
            " The CDN node can be added to the cluster by cluster manager only.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `cdn_node_key` - Public Key associated with the CDN node.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterCdnNodeAdded` event on successful CDN node addition.",
            "",
            " # Errors",
            "",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `OnlyTrustedClusterManager` error if the caller is not a trusted cluster manager.",
            " * `CdnNodeDoesNotExist` error if the adding CDN node does not exist.",
            " * `CdnNodeIsAddedToCluster(ClusterId)` error if the adding CDN node is already added to this or another cluster."
          ],
          "label": "cluster_add_cdn_node",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x0b4199f3"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Removes a CDN node from the targeting cluster.",
            "",
            " This endpoint removes a CDN node the targeting cluster.",
            " The CDN node can be removed from the cluster either by cluster manager or by the node owner.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `cdn_node_key` - Public Key associated with the CDN node.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterCdnNodeRemoved` event on successful CDN node removal.",
            "",
            " # Errors",
            "",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `OnlyClusterManagerOrCdnNodeProvider` error if the caller is not the cluster manager or node owner.",
            " * `CdnNodeDoesNotExist` error if the removing CDN node does not exist.",
            " * `CdnNodeIsNotAddedToCluster(ClusterId)` error if the removing CDN node is not in this cluster."
          ],
          "label": "cluster_remove_cdn_node",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xff8531d8"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "cluster_params",
              "type": {
                "displayName": [
                  "ClusterParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " Sets parameters for the targeting cluster.",
            "",
            " This endpoint updates [cluster parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#cluster-parameters) in protobuf format. ",
            " All cluster parameters must be specified as the endpoint works using SET approach.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `cluster_params` - [Cluster parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#cluster-parameters) in protobuf format.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterParamsSet` event on successful cluster params setting.",
            "",
            " # Errors",
            "",
            " * `OnlyClusterManager` error if the caller is not the cluster manager.",
            " * `ClusterDoesNotExist` error if the cluster does not exist."
          ],
          "label": "cluster_set_params",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x7dac5f9a"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Removes a cluster.",
            "",
            " This endpoint removes the cluster if it does not contain any nodes.",
            " Only an empty cluster can be removed.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterRemoved` event on successful cluster removal.",
            "",
            " # Errors",
            "",
            " * `OnlyClusterManager` error if the caller is not the cluster manager.",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `ClusterIsNotEmpty` error if the removing cluster contains some Storage or CDN nodes."
          ],
          "label": "cluster_remove",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x2248742a"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "status_in_cluster",
              "type": {
                "displayName": [
                  "NodeStatusInCluster"
                ],
                "type": 23
              }
            }
          ],
          "docs": [
            " Changes Storage node status.",
            "",
            " This endpoint changes Storage node status in a cluster.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `node_key` - Public Key associated with the Storage node.",
            " * `status` - Status for the targeting Storage node, can be one of the following: ACTIVE, ADDING, DELETING, OFFLINE.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterNodeStatusSet` event on successful Storage status change.",
            "",
            " # Errors",
            "",
            " * `OnlyClusterManager` error if the caller is not the cluster manager.",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `NodeIsNotAddedToCluster(ClusterId)` error if the Storage node is not in this cluster."
          ],
          "label": "cluster_set_node_status",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x8078df7f"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "status_in_cluster",
              "type": {
                "displayName": [
                  "NodeStatusInCluster"
                ],
                "type": 23
              }
            }
          ],
          "docs": [
            " Changes CDN node status.",
            "",
            " This endpoint changes CDN node status in a cluster.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `cdn_node_key` - Public Key associated with the CDN node.",
            " * `status` - Status for the targeting CDN node, can be one of the following: ACTIVE, ADDING, DELETING, OFFLINE.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterCdnNodeStatusSet` event on successful CDN status change.",
            "",
            " # Errors",
            "",
            " * `OnlyClusterManager` error if the caller is not the cluster manager.",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `CdnNodeIsNotAddedToCluster(ClusterId)` error if the CDN node is not in this cluster."
          ],
          "label": "cluster_set_cdn_node_status",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x577027ba"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "new_resource_per_v_node",
              "type": {
                "displayName": [
                  "Resource"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Sets the resource used per virual node in cluster.",
            "",
            " This endpoint sets the resource value that is being used by each virtual node in the cluster.",
            " If there are existing virtual nodes in the cluster the resource for its physical nodes will be recalculated.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            " * `new_resource_per_v_node` - Resource value that will be allocated for every virtual node in the cluster.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `ClusterNodeReplaced` event on successful virtual node reassignment.",
            "",
            " # Errors",
            "",
            " * `ClusterDoesNotExist` error if the cluster does not exist.",
            " * `OnlyClusterManager` error if the caller is not the cluster manager.",
            " * `NodeDoesNotExist` error if the new Storage node does not exist.",
            " * `VNodeIsNotAssignedToNode(ClusterId, VNodeToken)` error if the there is some virtual node that is being reasigned, but this virtual node is not assigned to any physical node.",
            " * `InsufficientClusterResources` - error if there is not enough resources in the cluster.",
            " * `InsufficientNodeResources` - error if there is not enough resources in a physical node."
          ],
          "label": "cluster_set_resource_per_v_node",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xbca5ef71"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Gets a cluster.",
            "",
            " This endpoint gets the targeting cluster along with its parameters, Storage and CDN nodes.",
            "",
            " # Parameters",
            "",
            " * `cluster_id` - ID of the targeting cluster.",
            "",
            " # Output",
            "",
            " Returns `ClusterInfo` data transfer object.",
            "",
            " # Errors",
            "",
            " * `ClusterDoesNotExist` error if the cluster does not exist."
          ],
          "label": "cluster_get",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 52
          },
          "selector": "0xe75411f5"
        },
        {
          "args": [
            {
              "label": "offset",
              "type": {
                "displayName": [
                  "u32"
                ],
                "type": 6
              }
            },
            {
              "label": "limit",
              "type": {
                "displayName": [
                  "u32"
                ],
                "type": 6
              }
            },
            {
              "label": "filter_manager_id",
              "type": {
                "displayName": [
                  "Option"
                ],
                "type": 41
              }
            }
          ],
          "docs": [
            " Gets a paginated list of clusters.",
            "",
            " This endpoint gets a paginated list of clusters along with their parameters, Storage and CDN nodes.",
            " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
            " The optimal `limit` depends on the size of params.",
            "",
            " # Parameters",
            "",
            " * `offset` - starting offset.",
            " * `limit` - page limit.",
            " * `filter_manager_id` - optional filter by cluster manager.",
            "",
            " # Errors",
            "",
            " No errors. In case a pagination param is out of bounds, an empty list will be returned."
          ],
          "label": "cluster_list",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [],
            "type": 54
          },
          "selector": "0xd9db9d44"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Trigger the distribution of revenues from the cluster to the providers."
          ],
          "label": "cluster_distribute_revenues",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xe71e66fc"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "usd_per_gb",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            }
          ],
          "docs": [
            " Set rate for streaming (price per gb)"
          ],
          "label": "cdn_set_rate",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x7578922a"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Get rate for streaming (price per gb)"
          ],
          "label": "cdn_get_rate",
          "mutates": false,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 56
          },
          "selector": "0xa1e3ea8a"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "aggregates_accounts",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 57
              }
            },
            {
              "label": "aggregates_nodes",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 57
              }
            },
            {
              "label": "aggregates_buckets",
              "type": {
                "displayName": [
                  "Vec"
                ],
                "type": 59
              }
            },
            {
              "label": "era",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 28
              }
            }
          ],
          "docs": [
            " As validator, charge payments from users and allocate undistributed payments to CDN nodes.",
            "",
            " As a result CDN cluster revenue increases, which can be distributed between CDN node providers via method cdn_cluster_distribute_revenues."
          ],
          "label": "cluster_put_cdn_revenue",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xeb8ec51c"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Trigger the distribution of revenues from the cluster to the CDN node providers.",
            "",
            " Anyone can call this method.",
            "",
            " Undistributed payments will be trasnferred, CDN cluster revenue will decrease."
          ],
          "label": "cluster_distribute_cdn_revenue",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x804ac6e0"
        },
        {
          "args": [
            {
              "label": "cdn_owner",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "commit",
              "type": {
                "displayName": [
                  "Commit"
                ],
                "type": 37
              }
            }
          ],
          "docs": [
            " CDN node operator sets the commit for current era."
          ],
          "label": "set_commit",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xe445e1fd"
        },
        {
          "args": [
            {
              "label": "cdn_owner",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Return the last commit submitted by CDN node operator"
          ],
          "label": "get_commit",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 35
          },
          "selector": "0x5329f551"
        },
        {
          "args": [
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Return last era validated per CDN node"
          ],
          "label": "get_validated_commit",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "EraAndTimestamp"
            ],
            "type": 40
          },
          "selector": "0x7d497bc1"
        },
        {
          "args": [
            {
              "label": "era_config",
              "type": {
                "displayName": [
                  "EraConfig"
                ],
                "type": 61
              }
            }
          ],
          "docs": [
            " Set the new configs for era"
          ],
          "label": "set_era",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x49a5b8f7"
        },
        {
          "args": [],
          "docs": [
            " Return current status of an era"
          ],
          "label": "get_era",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "EraStatus"
            ],
            "type": 62
          },
          "selector": "0x617f696b"
        },
        {
          "args": [],
          "docs": [
            " Return current era settings"
          ],
          "label": "get_era_settings",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "EraConfig"
            ],
            "type": 61
          },
          "selector": "0x84b61468"
        },
        {
          "args": [
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "cdn_node_params",
              "type": {
                "displayName": [
                  "CdnNodeParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " Creates a CDN node",
            "",
            " This endpoint creates a CDN node with specific parameters.",
            " The caller will be the node owner (node provider).",
            "",
            " # Parameters",
            "",
            " * `cdn_node_key` - Public Keys of the CDN node that should be treated as node identifier.",
            " * `cdn_node_params` - [CDN node parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#node-params.proto) in protobuf format.",
            "",
            " # Output",
            "",
            " Returns Public Key of the created CDN node.",
            "",
            " # Events",
            "",
            " * `CdnNodeCreated` event on successful CDN node creation.",
            "",
            " # Errors",
            "",
            " * `CdnNodeAlreadyExists` error if a CDN node with the same Public Key is already created.",
            " * `InvalidParams(message)` error if there is some invalid configuration parameter."
          ],
          "label": "cdn_node_create",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 64
          },
          "selector": "0xe8aa4ade"
        },
        {
          "args": [
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Removes a CDN node.",
            "",
            " This endpoint removes the targeting CDN Node if it is not added to some cluster.",
            " Only a node that is not a member of some cluster can be removed.",
            "",
            " # Parameters",
            "",
            " * `cdn_node_key` - Public Key associated with the CDN node.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `CdnNodeRemoved` event on successful CDN node removal.",
            "",
            " # Errors",
            "",
            " * `OnlyCdnNodeProvider` error if the caller is not the CDN node owner.",
            " * `CdnNodeDoesNotExist` error if the CDN node does not exist.",
            " * `CdnNodeIsAddedToCluster(ClusterId)` error if the removing CDN node is added to some cluster."
          ],
          "label": "cdn_node_remove",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xe068fb34"
        },
        {
          "args": [
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "cdn_node_params",
              "type": {
                "displayName": [
                  "CdnNodeParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " Sets parameters for the targeting CDN node.",
            "",
            " This endpoint updates [CDN node parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#node-params.proto) in protobuf format. ",
            " All CDN node parameters must be specified as the endpoint works using SET approach.",
            "",
            " # Parameters",
            "",
            " * `cdn_node_key` - Public Key associated with the CDN node.",
            " * `cdn_node_params` - [CDN node parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#node-params.proto) in protobuf format.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `CdnNodeParamsSet` event on successful CDN node params setting.",
            "",
            " # Errors",
            "",
            " * `OnlyCdnNodeProvider` error if the caller is not the CDN node owner.",
            " * `CdnNodeDoesNotExist` error if the CDN node does not exist."
          ],
          "label": "cdn_node_set_params",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xdf8b696e"
        },
        {
          "args": [
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Gets a CDN node.",
            "",
            " This endpoint gets the targeting CDN node along with its parameters.",
            "",
            " # Parameters",
            "",
            " * `cdn_node_key` - Public Key associated with the CDN node.",
            "",
            " # Output",
            "",
            " Returns `CdnNodeInfo` data transfer object.",
            "",
            " # Errors",
            "",
            " * `CdnNodeDoesNotExist` error if the CDN node does not exist."
          ],
          "label": "cdn_node_get",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 65
          },
          "selector": "0xf9a5a813"
        },
        {
          "args": [
            {
              "label": "offset",
              "type": {
                "displayName": [
                  "u32"
                ],
                "type": 6
              }
            },
            {
              "label": "limit",
              "type": {
                "displayName": [
                  "u32"
                ],
                "type": 6
              }
            },
            {
              "label": "filter_provider_id",
              "type": {
                "displayName": [
                  "Option"
                ],
                "type": 41
              }
            }
          ],
          "docs": [
            " Gets a paginated list of CDN nodes.",
            "",
            " This endpoint gets a paginated list of CDN nodes along with their parameters.",
            " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
            " The optimal `limit` depends on the size of params.",
            "",
            " # Parameters",
            "",
            " * `offset` - starting offset.",
            " * `limit` - page limit.",
            " * `filter_provider_id` - optional filter by CDN node owner.",
            "",
            " # Errors",
            "",
            " No errors. In case a pagination param is out of bounds, an empty list will be returned."
          ],
          "label": "cdn_node_list",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [],
            "type": 67
          },
          "selector": "0xf8589aae"
        },
        {
          "args": [
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "node_params",
              "type": {
                "displayName": [
                  "NodeParams"
                ],
                "type": 13
              }
            },
            {
              "label": "capacity",
              "type": {
                "displayName": [
                  "Resource"
                ],
                "type": 6
              }
            },
            {
              "label": "rent_v_node_per_month",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            }
          ],
          "docs": [
            " Creates a Storage node",
            "",
            " This endpoint creates a Storage node with specific parameters.",
            " The caller will be the node owner (node provider).",
            "",
            " # Parameters",
            "",
            " * `node_key` - Public Keys of the Storage node that should be treated as node identifier.",
            " * `node_params` - [Storage node parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#node-params.proto) in protobuf format.",
            " * `capacity` - Measure used to evaluate physical node hardware resources.",
            " * `rent_v_node_per_month` - Renting per month.",
            "",
            " # Output",
            "",
            " Returns Public Key of the created Storage node.",
            "",
            " # Events",
            "",
            " * `NodeCreated` event on successful Storage node creation.",
            "",
            " # Errors",
            "",
            " * `NodeAlreadyExists` error if a Storage node with the same Public Key is already created.",
            " * `InvalidParams(message)` error if there is some invalid configuration parameter."
          ],
          "label": "node_create",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 64
          },
          "selector": "0xb77ac1bb"
        },
        {
          "args": [
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Removes a Storage node.",
            "",
            " This endpoint removes the targeting Storage Node if it is not added to some cluster.",
            " Only a node that is not a member of some cluster can be removed.",
            "",
            " # Parameters",
            "",
            " * `node_key` - Public Key associated with the Storage node.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `NodeRemoved` event on successful Storage node removal.",
            "",
            " # Errors",
            "",
            " * `OnlyNodeProvider` error if the caller is not the Storage node owner.",
            " * `NodeDoesNotExist` error if the Storage node does not exist.",
            " * `NodeIsAddedToCluster(ClusterId)` error if the removing Storage node is added to some cluster."
          ],
          "label": "node_remove",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x42e5f273"
        },
        {
          "args": [
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "node_params",
              "type": {
                "displayName": [
                  "NodeParams"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " Sets parameters for the targeting Storage node.",
            "",
            " This endpoint updates [Storage node parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#node-params.proto) in protobuf format. ",
            " All Storage node parameters must be specified as the endpoint works using SET approach.",
            "",
            " # Parameters",
            "",
            " * `node_key` - Public Key associated with the Storage node.",
            " * `node_params` - [Storage node parameters](https://docs.cere.network/ddc/protocols/contract-params-schema#node-params.proto) in protobuf format. ",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `NodeParamsSet` event on successful Storage node params setting.",
            "",
            " # Errors",
            "",
            " * `OnlyNodeProvider` error if the caller is not the Storage node owner.",
            " * `NodeDoesNotExist` error if the Storage node does not exist."
          ],
          "label": "node_set_params",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xfb74fd2e"
        },
        {
          "args": [
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Gets a Storage node.",
            "",
            " This endpoint gets the targeting Storage node along with its parameters.",
            "",
            " # Parameters",
            "",
            " * `node_key` - Public Key associated with the Storage node.",
            "",
            " # Output",
            "",
            " Returns `NodeInfo` data transfer object.",
            "",
            " # Errors",
            "",
            " * `NodeDoesNotExist` error if the Storage node does not exist."
          ],
          "label": "node_get",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 69
          },
          "selector": "0x847f3997"
        },
        {
          "args": [
            {
              "label": "offset",
              "type": {
                "displayName": [
                  "u32"
                ],
                "type": 6
              }
            },
            {
              "label": "limit",
              "type": {
                "displayName": [
                  "u32"
                ],
                "type": 6
              }
            },
            {
              "label": "filter_provider_id",
              "type": {
                "displayName": [
                  "Option"
                ],
                "type": 41
              }
            }
          ],
          "docs": [
            " Gets a paginated list of Storage nodes.",
            "",
            " This endpoint gets a paginated list of Storage nodes along with their parameters.",
            " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
            " The optimal `limit` depends on the size of params.",
            "",
            " # Parameters",
            "",
            " * `offset` - starting offset.",
            " * `limit` - page limit.",
            " * `filter_provider_id` - optional filter by Storage node owner.",
            "",
            " # Errors",
            "",
            " No errors. In case a pagination param is out of bounds, an empty list will be returned."
          ],
          "label": "node_list",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [],
            "type": 71
          },
          "selector": "0x423286d6"
        },
        {
          "args": [],
          "docs": [
            " Get the Fee Percentage Basis Points that will be charged by the protocol"
          ],
          "label": "get_protocol_fee_bp",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "u128"
            ],
            "type": 12
          },
          "selector": "0x650857a8"
        },
        {
          "args": [],
          "docs": [
            " Return fees accumulated by the protocol"
          ],
          "label": "get_protocol_revenues",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Cash"
            ],
            "type": 18
          },
          "selector": "0x07c63885"
        },
        {
          "args": [],
          "docs": [
            " Get the Fee Percentage Basis Points that will be charged by the protocol"
          ],
          "label": "get_network_fee_config",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "NetworkFeeConfig"
            ],
            "type": 73
          },
          "selector": "0xd1503f07"
        },
        {
          "args": [],
          "docs": [
            " As user, deposit tokens on the account of the caller from the transaction value. This deposit",
            " can be used to pay for the services to buckets of the account."
          ],
          "label": "account_deposit",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xc311af62"
        },
        {
          "args": [
            {
              "label": "bond_amount",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            }
          ],
          "docs": [
            " As user, bond some amount of tokens from the withdrawable balance. These funds will be used to pay for CDN node service."
          ],
          "label": "account_bond",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xe9fad0bf"
        },
        {
          "args": [
            {
              "label": "amount_to_unbond",
              "type": {
                "displayName": [
                  "Cash"
                ],
                "type": 18
              }
            }
          ],
          "docs": [
            " As user, unbond a specified amount of tokens. The tokens will be locked for some time, as defined by contract owner."
          ],
          "label": "account_unbond",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xf7ea2c67"
        },
        {
          "args": [],
          "docs": [
            " As user, move the unbonded tokens back to withdrawable balance state.",
            "",
            " This can be triggered after unbonded_timestamp"
          ],
          "label": "account_withdraw_unbonded",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x98173716"
        },
        {
          "args": [
            {
              "label": "account_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Get the current status of an account."
          ],
          "label": "account_get",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 74
          },
          "selector": "0x1d4220fa"
        },
        {
          "args": [],
          "docs": [
            " Get the current conversion rate between the native currency and an external currency (USD)."
          ],
          "label": "account_get_usd_per_cere",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Balance"
            ],
            "type": 12
          },
          "selector": "0xe4a4652a"
        },
        {
          "args": [
            {
              "label": "usd_per_cere",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            }
          ],
          "docs": [
            " As price oracle, set the current conversion rate between the native currency and an external currency (USD).",
            "",
            " This requires the permission SetExchangeRate or SuperAdmin."
          ],
          "label": "account_set_usd_per_cere",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x48d45ee8"
        },
        {
          "args": [
            {
              "label": "account_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "label": "permission",
              "type": {
                "displayName": [
                  "Permission"
                ],
                "type": 75
              }
            }
          ],
          "docs": [
            " Checks for permission existence.",
            "",
            " This endpoint checks whether the given account has the given permission.",
            " Super-admin will always have all permissions.",
            "",
            " # Parameters",
            "",
            " * `account_id` - account to check permissions.",
            " * `permission` - permission to check.",
            "",
            " # Output",
            "",
            " Returns true if the account has permissions, false otherwise.",
            "",
            " # Errors",
            "",
            " No errors."
          ],
          "label": "has_permission",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "bool"
            ],
            "type": 3
          },
          "selector": "0xe0942492"
        },
        {
          "args": [
            {
              "label": "manager_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Grants permissions for a cluster manager.",
            "",
            " This endpoint grants permissions for a cluster manager ro manage Storage or CDN node owner.",
            " After the permission is granted, the cluster manager can add nodes to the cluster.",
            " Permissions can be granted by Storage or CDN node owner.",
            "",
            " # Parameters",
            "",
            " * `manager_id` - cluster manager account.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `PermissionGranted` event on successful manager permissions granting",
            "",
            " # Errors",
            "",
            " No errors. The endpoint is idempotent."
          ],
          "label": "grant_trusted_manager_permission",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xea0cbdcd"
        },
        {
          "args": [
            {
              "label": "manager_id",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Revokes permissions from cluster manager.",
            "",
            " This endpoint revokes permissions from a cluster manager to manage Storage or CDN node owner.",
            " After the permission is revoked, the cluster manager can add nodes to the cluster.",
            " Permissions can be revoked by Storage or CDN node owner.",
            "",
            " # Parameters",
            "",
            " * `manager_id` - cluster manager account.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `PermissionRevoked` event on successful manager permissions revoking",
            "",
            " # Errors",
            "",
            " No errors. The endpoint is idempotent."
          ],
          "label": "revoke_trusted_manager_permission",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x83532355"
        },
        {
          "args": [
            {
              "label": "grantee",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "label": "permission",
              "type": {
                "displayName": [
                  "Permission"
                ],
                "type": 75
              }
            }
          ],
          "docs": [
            " Grants any permission.",
            "",
            " This endpoint grants any permissions for any account by the Super-admin.",
            "",
            " # Parameters",
            "",
            " * `grantee` - account to grant permission.",
            " * `permission` - permission type.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `PermissionGranted` event on successful permissions granting",
            "",
            " # Errors",
            "",
            " Returns `OnlySuperAdmin` error if the caller is not the Super-admin."
          ],
          "label": "admin_grant_permission",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xbe41ea55"
        },
        {
          "args": [
            {
              "label": "grantee",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "label": "permission",
              "type": {
                "displayName": [
                  "Permission"
                ],
                "type": 75
              }
            }
          ],
          "docs": [
            " Revokes any permission.",
            "",
            " This endpoint revokes any permissions from any account by the Super-admin.",
            "",
            " # Parameters",
            "",
            " * `grantee` - account to revoke permission.",
            " * `permission` - permission type.",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `PermissionRevoked` event on successful permissions revoking",
            "",
            " # Errors",
            "",
            " Returns `OnlySuperAdmin` error if the caller is not the Super-admin."
          ],
          "label": "admin_revoke_permission",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x6b150666"
        },
        {
          "args": [
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "new_owner",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Transfers Storage node ownership.",
            "",
            " This endpoint transfers Storage node ownership from Super-admin account to the targeting account forever.",
            " This action is usually required only once after the Storage node certification process.",
            "",
            " # Parameters",
            "",
            " * `node_key` - Public Key associated with the Storage node.",
            " * `new_owner` - New Storage node owner",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `NodeOwnershipTransferred` event on successful Storage node ownership transfer",
            "",
            " # Errors",
            "",
            " * `OnlySuperAdmin` error if the caller is not the Super-admin.",
            " * `NodeDoesNotExist` error if the Storage node does not exist.",
            " * `NodeProviderIsNotSuperAdmin` error if the owner of the targeting node is not the Super-admin."
          ],
          "label": "admin_transfer_node_ownership",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x783b382d"
        },
        {
          "args": [
            {
              "label": "cdn_node_key",
              "type": {
                "displayName": [
                  "CdnNodeKey"
                ],
                "type": 9
              }
            },
            {
              "label": "new_owner",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [
            " Transfers CDN node ownership.",
            "",
            " This endpoint transfers CDN node ownership from Super-admin account to the targeting account forever.",
            " This action is usually required only once after the CDN node certification process.",
            "",
            " # Parameters",
            "",
            " * `cdn_node_key` - Public Key associated with the CDN node.",
            " * `new_owner` - CDN node owner",
            "",
            " # Output",
            "",
            " Returns nothing.",
            "",
            " # Events",
            "",
            " * `CdnNodeOwnershipTransferred` event on successful CDN node ownership transfer",
            "",
            " # Errors",
            "",
            " * `OnlySuperAdmin` error if the caller is not the Super-admin.",
            " * `CdnNodeDoesNotExist` error if the Storage node does not exist.",
            " * `CdnNodeOwnerIsNotSuperAdmin` error if the owner of the targeting node is not the Super-admin."
          ],
          "label": "admin_transfer_cdn_node_ownership",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xcd9821be"
        },
        {
          "args": [
            {
              "label": "amount",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            }
          ],
          "docs": [
            " As SuperAdmin, withdraw the funds held in custody in this contract.",
            "",
            " This is a temporary measure to allow migrating the funds to a new version of the contract."
          ],
          "label": "admin_withdraw",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x2f6e0868"
        },
        {
          "args": [
            {
              "label": "amount",
              "type": {
                "displayName": [
                  "Balance"
                ],
                "type": 12
              }
            }
          ],
          "docs": [
            " Pay the revenues accumulated by the protocol"
          ],
          "label": "admin_withdraw_protocol_revenues",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0xa781da48"
        },
        {
          "args": [
            {
              "label": "config",
              "type": {
                "displayName": [
                  "NetworkFeeConfig"
                ],
                "type": 73
              }
            }
          ],
          "docs": [
            " As SuperAdmin, set the network and cluster fee configuration."
          ],
          "label": "admin_set_network_fee_config",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x14649395"
        },
        {
          "args": [
            {
              "label": "protocol_fee_bp",
              "type": {
                "displayName": [
                  "BasisPoints"
                ],
                "type": 12
              }
            }
          ],
          "docs": [],
          "label": "admin_set_protocol_fee_bp",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 44
          },
          "selector": "0x00e00535"
        },
        {
          "args": [],
          "docs": [
            " Get all Account IDs stored in the SC"
          ],
          "label": "get_accounts",
          "mutates": false,
          "payable": true,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 15
          },
          "selector": "0xef03ead7"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            }
          ],
          "docs": [],
          "label": "get_v_nodes_by_cluster",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 27
          },
          "selector": "0x94eb8da6"
        },
        {
          "args": [
            {
              "label": "node_key",
              "type": {
                "displayName": [
                  "NodeKey"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "label": "get_v_nodes_by_node",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 27
          },
          "selector": "0xf0dfbd13"
        },
        {
          "args": [
            {
              "label": "cluster_id",
              "type": {
                "displayName": [
                  "ClusterId"
                ],
                "type": 6
              }
            },
            {
              "label": "v_node",
              "type": {
                "displayName": [
                  "VNodeToken"
                ],
                "type": 28
              }
            }
          ],
          "docs": [],
          "label": "get_node_by_v_node",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "Result"
            ],
            "type": 64
          },
          "selector": "0xea47048e"
        }
      ]
    },
    "storage": {
      "struct": {
        "fields": [
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "ty": 0
                      }
                    },
                    "name": "perms"
                  }
                ]
              }
            },
            "name": "perms"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0100000000000000000000000000000000000000000000000000000000000000",
                        "ty": 6
                      }
                    },
                    "name": "next_bucket_id"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0200000000000000000000000000000000000000000000000000000000000000",
                        "ty": 7
                      }
                    },
                    "name": "buckets"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0300000000000000000000000000000000000000000000000000000000000000",
                        "ty": 14
                      }
                    },
                    "name": "writers"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0400000000000000000000000000000000000000000000000000000000000000",
                        "ty": 14
                      }
                    },
                    "name": "readers"
                  }
                ]
              }
            },
            "name": "buckets"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0500000000000000000000000000000000000000000000000000000000000000",
                        "ty": 6
                      }
                    },
                    "name": "next_cluster_id"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0600000000000000000000000000000000000000000000000000000000000000",
                        "ty": 16
                      }
                    },
                    "name": "clusters"
                  }
                ]
              }
            },
            "name": "clusters"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0700000000000000000000000000000000000000000000000000000000000000",
                        "ty": 19
                      }
                    },
                    "name": "cdn_nodes"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0800000000000000000000000000000000000000000000000000000000000000",
                        "ty": 15
                      }
                    },
                    "name": "keys"
                  }
                ]
              }
            },
            "name": "cdn_nodes"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0900000000000000000000000000000000000000000000000000000000000000",
                        "ty": 24
                      }
                    },
                    "name": "nodes"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0a00000000000000000000000000000000000000000000000000000000000000",
                        "ty": 15
                      }
                    },
                    "name": "keys"
                  }
                ]
              }
            },
            "name": "nodes"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0b00000000000000000000000000000000000000000000000000000000000000",
                        "ty": 26
                      }
                    },
                    "name": "v_nodes_map"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0c00000000000000000000000000000000000000000000000000000000000000",
                        "ty": 29
                      }
                    },
                    "name": "nodes_map"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0d00000000000000000000000000000000000000000000000000000000000000",
                        "ty": 31
                      }
                    },
                    "name": "cluster_v_nodes_map"
                  }
                ]
              }
            },
            "name": "topology"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0e00000000000000000000000000000000000000000000000000000000000000",
                        "ty": 32
                      }
                    },
                    "name": "accounts"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x0f00000000000000000000000000000000000000000000000000000000000000",
                        "ty": 15
                      }
                    },
                    "name": "accounts_keys"
                  }
                ]
              }
            },
            "name": "accounts"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x1000000000000000000000000000000000000000000000000000000000000000",
                        "ty": 9
                      }
                    },
                    "name": "operator_id"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x1100000000000000000000000000000000000000000000000000000000000000",
                        "ty": 34
                      }
                    },
                    "name": "commits"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x1200000000000000000000000000000000000000000000000000000000000000",
                        "ty": 39
                      }
                    },
                    "name": "validated_commits"
                  },
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1300000000000000000000000000000000000000000000000000000000000000",
                                "ty": 28
                              }
                            },
                            "name": "start"
                          },
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1400000000000000000000000000000000000000000000000000000000000000",
                                "ty": 28
                              }
                            },
                            "name": "interval"
                          },
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1500000000000000000000000000000000000000000000000000000000000000",
                                "ty": 28
                              }
                            },
                            "name": "commit_duration"
                          },
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1600000000000000000000000000000000000000000000000000000000000000",
                                "ty": 28
                              }
                            },
                            "name": "validation_duration"
                          }
                        ]
                      }
                    },
                    "name": "era_settings"
                  }
                ]
              }
            },
            "name": "committer"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x1700000000000000000000000000000000000000000000000000000000000000",
                        "ty": 12
                      }
                    },
                    "name": "protocol_fee_bp"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x1800000000000000000000000000000000000000000000000000000000000000",
                        "ty": 9
                      }
                    },
                    "name": "protocol_fee_destination"
                  },
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1900000000000000000000000000000000000000000000000000000000000000",
                                "ty": 12
                              }
                            },
                            "name": null
                          }
                        ]
                      }
                    },
                    "name": "revenues"
                  },
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1a00000000000000000000000000000000000000000000000000000000000000",
                                "ty": 12
                              }
                            },
                            "name": "rate"
                          }
                        ]
                      }
                    },
                    "name": "curr_converter"
                  },
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1b00000000000000000000000000000000000000000000000000000000000000",
                                "ty": 12
                              }
                            },
                            "name": "network_fee_bp"
                          },
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1c00000000000000000000000000000000000000000000000000000000000000",
                                "ty": 9
                              }
                            },
                            "name": "network_fee_destination"
                          },
                          {
                            "layout": {
                              "cell": {
                                "key": "0x1d00000000000000000000000000000000000000000000000000000000000000",
                                "ty": 12
                              }
                            },
                            "name": "cluster_management_fee_bp"
                          }
                        ]
                      }
                    },
                    "name": "network_fee_config"
                  }
                ]
              }
            },
            "name": "protocol"
          }
        ]
      }
    },
    "types": [
      {
        "id": 0,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 1
            },
            {
              "name": "V",
              "type": 3
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 1,
        "type": {
          "def": {
            "sequence": {
              "type": 2
            }
          }
        }
      },
      {
        "id": 2,
        "type": {
          "def": {
            "primitive": "u8"
          }
        }
      },
      {
        "id": 3,
        "type": {
          "def": {
            "primitive": "bool"
          }
        }
      },
      {
        "id": 4,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 5,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_primitives",
            "Key"
          ]
        }
      },
      {
        "id": 5,
        "type": {
          "def": {
            "array": {
              "len": 32,
              "type": 2
            }
          }
        }
      },
      {
        "id": 6,
        "type": {
          "def": {
            "primitive": "u32"
          }
        }
      },
      {
        "id": 7,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 6
            },
            {
              "name": "V",
              "type": 8
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 8,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "owner_id",
                  "type": 9,
                  "typeName": "AccountId"
                },
                {
                  "name": "cluster_id",
                  "type": 6,
                  "typeName": "ClusterId"
                },
                {
                  "name": "flow",
                  "type": 10,
                  "typeName": "Flow"
                },
                {
                  "name": "resource_reserved",
                  "type": 6,
                  "typeName": "Resource"
                },
                {
                  "name": "public_availability",
                  "type": 3,
                  "typeName": "bool"
                },
                {
                  "name": "resource_consumption_cap",
                  "type": 6,
                  "typeName": "Resource"
                },
                {
                  "name": "bucket_params",
                  "type": 13,
                  "typeName": "BucketParams"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "bucket",
            "entity",
            "Bucket"
          ]
        }
      },
      {
        "id": 9,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 5,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_env",
            "types",
            "AccountId"
          ]
        }
      },
      {
        "id": 10,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "from",
                  "type": 9,
                  "typeName": "AccountId"
                },
                {
                  "name": "schedule",
                  "type": 11,
                  "typeName": "Schedule"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "flow",
            "Flow"
          ]
        }
      },
      {
        "id": 11,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "rate",
                  "type": 12,
                  "typeName": "Balance"
                },
                {
                  "name": "offset",
                  "type": 12,
                  "typeName": "Balance"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "schedule",
            "Schedule"
          ]
        }
      },
      {
        "id": 12,
        "type": {
          "def": {
            "primitive": "u128"
          }
        }
      },
      {
        "id": 13,
        "type": {
          "def": {
            "primitive": "str"
          }
        }
      },
      {
        "id": 14,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 6
            },
            {
              "name": "V",
              "type": 15
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 15,
        "type": {
          "def": {
            "sequence": {
              "type": 9
            }
          }
        }
      },
      {
        "id": 16,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 6
            },
            {
              "name": "V",
              "type": 17
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 17,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "manager_id",
                  "type": 9,
                  "typeName": "AccountId"
                },
                {
                  "name": "cluster_params",
                  "type": 13,
                  "typeName": "ClusterParams"
                },
                {
                  "name": "nodes_keys",
                  "type": 15,
                  "typeName": "Vec<NodeKey>"
                },
                {
                  "name": "resource_per_v_node",
                  "type": 6,
                  "typeName": "Resource"
                },
                {
                  "name": "resource_used",
                  "type": 6,
                  "typeName": "Resource"
                },
                {
                  "name": "revenues",
                  "type": 18,
                  "typeName": "Cash"
                },
                {
                  "name": "total_rent",
                  "type": 12,
                  "typeName": "Balance"
                },
                {
                  "name": "cdn_nodes_keys",
                  "type": 15,
                  "typeName": "Vec<CdnNodeKey>"
                },
                {
                  "name": "cdn_revenues",
                  "type": 18,
                  "typeName": "Cash"
                },
                {
                  "name": "cdn_usd_per_gb",
                  "type": 12,
                  "typeName": "Balance"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "cluster",
            "entity",
            "Cluster"
          ]
        }
      },
      {
        "id": 18,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "value",
                  "type": 12,
                  "typeName": "Balance"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "cash",
            "Cash"
          ]
        }
      },
      {
        "id": 19,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 9
            },
            {
              "name": "V",
              "type": 20
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 20,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "provider_id",
                  "type": 9,
                  "typeName": "ProviderId"
                },
                {
                  "name": "undistributed_payment",
                  "type": 12,
                  "typeName": "Balance"
                },
                {
                  "name": "cdn_node_params",
                  "type": 13,
                  "typeName": "CdnNodeParams"
                },
                {
                  "name": "cluster_id",
                  "type": 21,
                  "typeName": "Option<ClusterId>"
                },
                {
                  "name": "status_in_cluster",
                  "type": 22,
                  "typeName": "Option<NodeStatusInCluster>"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "cdn_node",
            "entity",
            "CdnNode"
          ]
        }
      },
      {
        "id": 21,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "None"
                },
                {
                  "fields": [
                    {
                      "type": 6
                    }
                  ],
                  "index": 1,
                  "name": "Some"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 6
            }
          ],
          "path": [
            "Option"
          ]
        }
      },
      {
        "id": 22,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "None"
                },
                {
                  "fields": [
                    {
                      "type": 23
                    }
                  ],
                  "index": 1,
                  "name": "Some"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 23
            }
          ],
          "path": [
            "Option"
          ]
        }
      },
      {
        "id": 23,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "ADDING"
                },
                {
                  "index": 1,
                  "name": "ACTIVE"
                },
                {
                  "index": 2,
                  "name": "DELETING"
                },
                {
                  "index": 3,
                  "name": "OFFLINE"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "node",
            "entity",
            "NodeStatusInCluster"
          ]
        }
      },
      {
        "id": 24,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 9
            },
            {
              "name": "V",
              "type": 25
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 25,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "provider_id",
                  "type": 9,
                  "typeName": "ProviderId"
                },
                {
                  "name": "rent_v_node_per_month",
                  "type": 12,
                  "typeName": "Balance"
                },
                {
                  "name": "free_resource",
                  "type": 6,
                  "typeName": "Resource"
                },
                {
                  "name": "node_params",
                  "type": 13,
                  "typeName": "NodeParams"
                },
                {
                  "name": "cluster_id",
                  "type": 21,
                  "typeName": "Option<ClusterId>"
                },
                {
                  "name": "status_in_cluster",
                  "type": 22,
                  "typeName": "Option<NodeStatusInCluster>"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "node",
            "entity",
            "Node"
          ]
        }
      },
      {
        "id": 26,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 9
            },
            {
              "name": "V",
              "type": 27
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 27,
        "type": {
          "def": {
            "sequence": {
              "type": 28
            }
          }
        }
      },
      {
        "id": 28,
        "type": {
          "def": {
            "primitive": "u64"
          }
        }
      },
      {
        "id": 29,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 30
            },
            {
              "name": "V",
              "type": 9
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 30,
        "type": {
          "def": {
            "tuple": [
              6,
              28
            ]
          }
        }
      },
      {
        "id": 31,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 6
            },
            {
              "name": "V",
              "type": 27
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 32,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 9
            },
            {
              "name": "V",
              "type": 33
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 33,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "deposit",
                  "type": 18,
                  "typeName": "Cash"
                },
                {
                  "name": "bonded",
                  "type": 18,
                  "typeName": "Cash"
                },
                {
                  "name": "negative",
                  "type": 18,
                  "typeName": "Cash"
                },
                {
                  "name": "unbonded_amount",
                  "type": 18,
                  "typeName": "Cash"
                },
                {
                  "name": "unbonded_timestamp",
                  "type": 28,
                  "typeName": "u64"
                },
                {
                  "name": "payable_schedule",
                  "type": 11,
                  "typeName": "Schedule"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "account",
            "entity",
            "Account"
          ]
        }
      },
      {
        "id": 34,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 9
            },
            {
              "name": "V",
              "type": 35
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 35,
        "type": {
          "def": {
            "sequence": {
              "type": 36
            }
          }
        }
      },
      {
        "id": 36,
        "type": {
          "def": {
            "tuple": [
              9,
              37
            ]
          }
        }
      },
      {
        "id": 37,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "hash",
                  "type": 38,
                  "typeName": "Hash"
                },
                {
                  "name": "total_logs",
                  "type": 12,
                  "typeName": "u128"
                },
                {
                  "name": "from_timestamp",
                  "type": 28,
                  "typeName": "u64"
                },
                {
                  "name": "to_timestamp",
                  "type": 28,
                  "typeName": "u64"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "committer",
            "store",
            "Commit"
          ]
        }
      },
      {
        "id": 38,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 5,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_env",
            "types",
            "Hash"
          ]
        }
      },
      {
        "id": 39,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 4,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 9
            },
            {
              "name": "V",
              "type": 40
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 40,
        "type": {
          "def": {
            "tuple": [
              28,
              28
            ]
          }
        }
      },
      {
        "id": 41,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "None"
                },
                {
                  "fields": [
                    {
                      "type": 9
                    }
                  ],
                  "index": 1,
                  "name": "Some"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 9
            }
          ],
          "path": [
            "Option"
          ]
        }
      },
      {
        "id": 42,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 6
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 6
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 43,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "NodeDoesNotExist"
                },
                {
                  "index": 1,
                  "name": "CdnNodeDoesNotExist"
                },
                {
                  "index": 2,
                  "name": "NodeAlreadyExists"
                },
                {
                  "index": 3,
                  "name": "CdnNodeAlreadyExists"
                },
                {
                  "index": 4,
                  "name": "AccountDoesNotExist"
                },
                {
                  "index": 5,
                  "name": "ParamsDoesNotExist"
                },
                {
                  "index": 6,
                  "name": "ParamsSizeExceedsLimit"
                },
                {
                  "index": 7,
                  "name": "OnlyOwner"
                },
                {
                  "index": 8,
                  "name": "OnlyNodeProvider"
                },
                {
                  "index": 9,
                  "name": "OnlyCdnNodeProvider"
                },
                {
                  "index": 10,
                  "name": "OnlyClusterManager"
                },
                {
                  "index": 11,
                  "name": "OnlyTrustedClusterManager"
                },
                {
                  "index": 12,
                  "name": "OnlyValidator"
                },
                {
                  "index": 13,
                  "name": "OnlySuperAdmin"
                },
                {
                  "index": 14,
                  "name": "OnlyClusterManagerOrNodeProvider"
                },
                {
                  "index": 15,
                  "name": "OnlyClusterManagerOrCdnNodeProvider"
                },
                {
                  "index": 16,
                  "name": "Unauthorized"
                },
                {
                  "index": 17,
                  "name": "ClusterDoesNotExist"
                },
                {
                  "index": 18,
                  "name": "ClusterIsNotEmpty"
                },
                {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "ClusterId"
                    }
                  ],
                  "index": 19,
                  "name": "TopologyIsNotCreated"
                },
                {
                  "index": 20,
                  "name": "TopologyAlreadyExists"
                },
                {
                  "index": 21,
                  "name": "NodesSizeExceedsLimit"
                },
                {
                  "index": 22,
                  "name": "CdnNodesSizeExceedsLimit"
                },
                {
                  "index": 23,
                  "name": "VNodesSizeExceedsLimit"
                },
                {
                  "index": 24,
                  "name": "AccountsSizeExceedsLimit"
                },
                {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "ClusterId"
                    }
                  ],
                  "index": 25,
                  "name": "NodeIsNotAddedToCluster"
                },
                {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "ClusterId"
                    }
                  ],
                  "index": 26,
                  "name": "NodeIsAddedToCluster"
                },
                {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "ClusterId"
                    }
                  ],
                  "index": 27,
                  "name": "CdnNodeIsNotAddedToCluster"
                },
                {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "ClusterId"
                    }
                  ],
                  "index": 28,
                  "name": "CdnNodeIsAddedToCluster"
                },
                {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "ClusterId"
                    }
                  ],
                  "index": 29,
                  "name": "VNodeDoesNotExistsInCluster"
                },
                {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "ClusterId"
                    },
                    {
                      "type": 28,
                      "typeName": "VNodeToken"
                    }
                  ],
                  "index": 30,
                  "name": "VNodeIsNotAssignedToNode"
                },
                {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "NodeKey"
                    }
                  ],
                  "index": 31,
                  "name": "VNodeIsAlreadyAssignedToNode"
                },
                {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "ClusterId"
                    },
                    {
                      "type": 9,
                      "typeName": "NodeKey"
                    }
                  ],
                  "index": 32,
                  "name": "AtLeastOneVNodeHasToBeAssigned"
                },
                {
                  "index": 33,
                  "name": "NodeProviderIsNotSuperAdmin"
                },
                {
                  "index": 34,
                  "name": "CdnNodeOwnerIsNotSuperAdmin"
                },
                {
                  "index": 35,
                  "name": "BucketDoesNotExist"
                },
                {
                  "index": 36,
                  "name": "BondingPeriodNotFinished"
                },
                {
                  "index": 37,
                  "name": "TransferFailed"
                },
                {
                  "index": 38,
                  "name": "InsufficientBalance"
                },
                {
                  "index": 39,
                  "name": "InsufficientNodeResources"
                },
                {
                  "index": 40,
                  "name": "InsufficientClusterResources"
                },
                {
                  "index": 41,
                  "name": "EraSettingFailed"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "Error"
          ]
        }
      },
      {
        "id": 44,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 45
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 45
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 45,
        "type": {
          "def": {
            "tuple": []
          }
        }
      },
      {
        "id": 46,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 47
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 47
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 47,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "bucket_id",
                  "type": 6,
                  "typeName": "BucketId"
                },
                {
                  "name": "bucket",
                  "type": 48,
                  "typeName": "BucketInStatus"
                },
                {
                  "name": "params",
                  "type": 13,
                  "typeName": "BucketParams"
                },
                {
                  "name": "writer_ids",
                  "type": 15,
                  "typeName": "Vec<AccountId>"
                },
                {
                  "name": "reader_ids",
                  "type": 15,
                  "typeName": "Vec<AccountId>"
                },
                {
                  "name": "rent_covered_until_ms",
                  "type": 28,
                  "typeName": "u64"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "bucket",
            "entity",
            "BucketStatus"
          ]
        }
      },
      {
        "id": 48,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "owner_id",
                  "type": 9,
                  "typeName": "AccountId"
                },
                {
                  "name": "cluster_id",
                  "type": 6,
                  "typeName": "ClusterId"
                },
                {
                  "name": "resource_reserved",
                  "type": 6,
                  "typeName": "Resource"
                },
                {
                  "name": "public_availability",
                  "type": 3,
                  "typeName": "bool"
                },
                {
                  "name": "resource_consumption_cap",
                  "type": 6,
                  "typeName": "Resource"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "bucket",
            "entity",
            "BucketInStatus"
          ]
        }
      },
      {
        "id": 49,
        "type": {
          "def": {
            "tuple": [
              50,
              6
            ]
          }
        }
      },
      {
        "id": 50,
        "type": {
          "def": {
            "sequence": {
              "type": 47
            }
          }
        }
      },
      {
        "id": 51,
        "type": {
          "def": {
            "sequence": {
              "type": 8
            }
          }
        }
      },
      {
        "id": 52,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 53
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 53
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 53,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "cluster_id",
                  "type": 6,
                  "typeName": "ClusterId"
                },
                {
                  "name": "cluster",
                  "type": 17,
                  "typeName": "Cluster"
                },
                {
                  "name": "cluster_v_nodes",
                  "type": 27,
                  "typeName": "Vec<VNodeToken>"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "cluster",
            "entity",
            "ClusterInfo"
          ]
        }
      },
      {
        "id": 54,
        "type": {
          "def": {
            "tuple": [
              55,
              6
            ]
          }
        }
      },
      {
        "id": 55,
        "type": {
          "def": {
            "sequence": {
              "type": 53
            }
          }
        }
      },
      {
        "id": 56,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 12
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 12
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 57,
        "type": {
          "def": {
            "sequence": {
              "type": 58
            }
          }
        }
      },
      {
        "id": 58,
        "type": {
          "def": {
            "tuple": [
              9,
              12
            ]
          }
        }
      },
      {
        "id": 59,
        "type": {
          "def": {
            "sequence": {
              "type": 60
            }
          }
        }
      },
      {
        "id": 60,
        "type": {
          "def": {
            "tuple": [
              6,
              6
            ]
          }
        }
      },
      {
        "id": 61,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "start",
                  "type": 28,
                  "typeName": "u64"
                },
                {
                  "name": "interval",
                  "type": 28,
                  "typeName": "u64"
                },
                {
                  "name": "commit_duration",
                  "type": 28,
                  "typeName": "u64"
                },
                {
                  "name": "validation_duration",
                  "type": 28,
                  "typeName": "u64"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "committer",
            "store",
            "EraConfig"
          ]
        }
      },
      {
        "id": 62,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "current_era",
                  "type": 28,
                  "typeName": "u64"
                },
                {
                  "name": "current_phase",
                  "type": 63,
                  "typeName": "Phase"
                },
                {
                  "name": "previous_era",
                  "type": 28,
                  "typeName": "u64"
                },
                {
                  "name": "prev_era_from_timestamp",
                  "type": 28,
                  "typeName": "u64"
                },
                {
                  "name": "prev_era_to_timestamp",
                  "type": 28,
                  "typeName": "u64"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "committer",
            "store",
            "EraStatus"
          ]
        }
      },
      {
        "id": 63,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "Commit"
                },
                {
                  "index": 1,
                  "name": "Valiadation"
                },
                {
                  "index": 2,
                  "name": "Payout"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "committer",
            "store",
            "Phase"
          ]
        }
      },
      {
        "id": 64,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 9
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 9
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 65,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 66
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 66
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 66,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "cdn_node_key",
                  "type": 9,
                  "typeName": "CdnNodeKey"
                },
                {
                  "name": "cdn_node",
                  "type": 20,
                  "typeName": "CdnNode"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "cdn_node",
            "entity",
            "CdnNodeInfo"
          ]
        }
      },
      {
        "id": 67,
        "type": {
          "def": {
            "tuple": [
              68,
              6
            ]
          }
        }
      },
      {
        "id": 68,
        "type": {
          "def": {
            "sequence": {
              "type": 66
            }
          }
        }
      },
      {
        "id": 69,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 70
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 70
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 70,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "node_key",
                  "type": 9,
                  "typeName": "NodeKey"
                },
                {
                  "name": "node",
                  "type": 25,
                  "typeName": "Node"
                },
                {
                  "name": "v_nodes",
                  "type": 27,
                  "typeName": "Vec<VNodeToken>"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "node",
            "entity",
            "NodeInfo"
          ]
        }
      },
      {
        "id": 71,
        "type": {
          "def": {
            "tuple": [
              72,
              6
            ]
          }
        }
      },
      {
        "id": 72,
        "type": {
          "def": {
            "sequence": {
              "type": 70
            }
          }
        }
      },
      {
        "id": 73,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "network_fee_bp",
                  "type": 12,
                  "typeName": "BasisPoints"
                },
                {
                  "name": "network_fee_destination",
                  "type": 9,
                  "typeName": "AccountId"
                },
                {
                  "name": "cluster_management_fee_bp",
                  "type": 12,
                  "typeName": "BasisPoints"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "protocol",
            "store",
            "NetworkFeeConfig"
          ]
        }
      },
      {
        "id": 74,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 33
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 43
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 33
            },
            {
              "name": "E",
              "type": 43
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 75,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "AccountId"
                    }
                  ],
                  "index": 0,
                  "name": "ClusterManagerTrustedBy"
                },
                {
                  "index": 1,
                  "name": "SetExchangeRate"
                },
                {
                  "index": 2,
                  "name": "SuperAdmin"
                },
                {
                  "index": 3,
                  "name": "Validator"
                }
              ]
            }
          },
          "path": [
            "ddc_bucket",
            "ddc_bucket",
            "perm",
            "entity",
            "Permission"
          ]
        }
      }
    ]
  }
}