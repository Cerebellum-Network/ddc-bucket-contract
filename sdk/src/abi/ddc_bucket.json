{
  "source": {
    "hash": "0x5910096521f5a51ac80f54587fdaa5cfbc1a93fafd3216c6b15ee8c7948d670f",
    "language": "ink! 4.1.0",
    "compiler": "rustc 1.66.0-nightly",
    "build_info": {
      "build_mode": "Release",
      "cargo_contract_version": "2.1.0",
      "rust_toolchain": "nightly-x86_64-unknown-linux-gnu",
      "wasm_opt_settings": {
        "keep_debug_symbols": false,
        "optimization_passes": "Z"
      }
    }
  },
  "contract": {
    "name": "ddc_bucket",
    "version": "0.5.2",
    "authors": [
      "Aur√©lien Nicolas <aurel@cere.network>"
    ],
    "description": "DDC v2 Smart Contracts -- Orchestrate the network around clusters and buckets",
    "license": "Apache-2.0"
  },
  "spec": {
    "constructors": [
      {
        "args": [],
        "docs": [
          "Create a new contract.",
          "",
          "The caller will be admin of the contract."
        ],
        "label": "new",
        "payable": false,
        "returnType": {
          "displayName": [
            "ink_primitives",
            "ConstructorResult"
          ],
          "type": 31
        },
        "selector": "0x9bae9d5e"
      }
    ],
    "docs": [],
    "events": [
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "owner_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " A bucket was created. The given account is its first owner and payer of resources."
        ],
        "label": "BucketCreated"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "resource",
            "type": {
              "displayName": [
                "Resource"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Some amount of resources of a cluster were allocated to a bucket."
        ],
        "label": "BucketAllocated"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " The due costs of a bucket was settled from the bucket payer to the cluster."
        ],
        "label": "BucketSettlePayment"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "manager",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "cluster_params",
            "type": {
              "displayName": [
                "ClusterParams"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " A new cluster was created."
        ],
        "label": "ClusterCreated"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " A vnode was re-assigned to new node."
        ],
        "label": "ClusterNodeReplaced"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "resource",
            "type": {
              "displayName": [
                "Resource"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Some resources were reserved for the cluster from the nodes."
        ],
        "label": "ClusterReserveResource"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "provider_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " The share of revenues of a cluster for a provider was distributed."
        ],
        "label": "ClusterDistributeRevenues"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "manager",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " A new cluster was created."
        ],
        "label": "CdnClusterCreated"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "provider_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " The respective share of revenues of a CDN cluster for a provider was distributed."
        ],
        "label": "CdnClusterDistributeRevenues"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "provider_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "undistributed_payment",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 8
            }
          }
        ],
        "docs": [
          " A node was created. The given account is its owner and recipient of revenues."
        ],
        "label": "CdnNodeCreated"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "provider_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "rent_per_month",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 8
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "node_params",
            "type": {
              "displayName": [
                "NodeParams"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " A node was created. The given account is its owner and recipient of revenues."
        ],
        "label": "NodeCreated"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "account_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "value",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 8
            }
          }
        ],
        "docs": [
          " Tokens were deposited on an account."
        ],
        "label": "Deposit"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "account_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "permission",
            "type": {
              "displayName": [
                "Permission"
              ],
              "type": 89
            }
          }
        ],
        "docs": [
          " A permission was granted to the account."
        ],
        "label": "GrantPermission"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "account_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "permission",
            "type": {
              "displayName": [
                "Permission"
              ],
              "type": 89
            }
          }
        ],
        "docs": [
          " A permission was revoked from the account."
        ],
        "label": "RevokePermission"
      }
    ],
    "lang_error": {
      "displayName": [
        "ink",
        "LangError"
      ],
      "type": 33
    },
    "messages": [
      {
        "args": [
          {
            "label": "bucket_params",
            "type": {
              "displayName": [
                "BucketParams"
              ],
              "type": 12
            }
          },
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "label": "owner_id",
            "type": {
              "displayName": [
                "Option"
              ],
              "type": 34
            }
          }
        ],
        "docs": [
          " Create a new bucket and return its `bucket_id`.",
          "",
          " The caller will be its first owner and payer of resources.",
          "",
          " `bucket_params` is configuration used by clients and nodes. See the [data structure of BucketParams](https://docs.cere.network/ddc/protocols/contract-params-schema)",
          "",
          " The bucket can be connected to a single cluster (currently). Allocate cluster resources with the function `bucket_alloc_into_cluster`"
        ],
        "label": "bucket_create",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 35
        },
        "selector": "0x0aeb2379"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "owner_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " Change owner of the bucket",
          "",
          " Provide the account of new owner"
        ],
        "label": "bucket_change_owner",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xc7d0c2cd"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "resource",
            "type": {
              "displayName": [
                "Resource"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Allocate some resources of a cluster to a bucket.",
          "",
          " The amount of resources is given per vnode (total resources will be `resource` times the number of vnodes)."
        ],
        "label": "bucket_alloc_into_cluster",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x4c482d19"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Settle the due costs of a bucket from its payer account to the cluster account."
        ],
        "label": "bucket_settle_payment",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x15974555"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "params",
            "type": {
              "displayName": [
                "BucketParams"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " Change the `bucket_params`, which is configuration used by clients and nodes.",
          "",
          " See the [data structure of BucketParams](https://docs.cere.network/ddc/protocols/contract-params-schema)"
        ],
        "label": "bucket_change_params",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x9f2d075b"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Get the current status of a bucket."
        ],
        "label": "bucket_get",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 36
        },
        "selector": "0x3802cb77"
      },
      {
        "args": [
          {
            "label": "offset",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "limit",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "filter_owner_id",
            "type": {
              "displayName": [
                "Option"
              ],
              "type": 34
            }
          }
        ],
        "docs": [
          " Iterate through all buckets.",
          "",
          " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
          " The optimal `limit` depends on the size of params.",
          "",
          " The results can be filtered by owner. Note that paging must still be completed fully."
        ],
        "label": "bucket_list",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 41
        },
        "selector": "0x417ab584"
      },
      {
        "args": [
          {
            "label": "owner_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " Iterate through all buckets and return only those owned by owner",
          "",
          " This method returns bucket struct, not the status"
        ],
        "label": "bucket_list_for_account",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 44
        },
        "selector": "0xc434cf57"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "public_availability",
            "type": {
              "displayName": [
                "bool"
              ],
              "type": 9
            }
          }
        ],
        "docs": [
          " Set availiablity of the bucket"
        ],
        "label": "bucket_set_availability",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x053eb3ce"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "new_resource_cap",
            "type": {
              "displayName": [
                "Resource"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Set max resource cap to be charged by CDN for public bucket"
        ],
        "label": "bucket_set_resource_cap",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x85010c6d"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Set permission for the reader of the bucket"
        ],
        "label": "get_bucket_writers",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 45
        },
        "selector": "0x499cd4b7"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "writer",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " Set permission for the writer of the bucket"
        ],
        "label": "bucket_set_writer_perm",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xea2e477a"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "writer",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " Revoke permission for the writer of the bucket"
        ],
        "label": "bucket_revoke_writer_perm",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x2b3d8dd1"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Set permission for the reader of the bucket"
        ],
        "label": "get_bucket_readers",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 45
        },
        "selector": "0xb9a7cc1c"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "reader",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " Set permission for the reader of the bucket"
        ],
        "label": "bucket_set_reader_perm",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xfc0e94ea"
      },
      {
        "args": [
          {
            "label": "bucket_id",
            "type": {
              "displayName": [
                "BucketId"
              ],
              "type": 5
            }
          },
          {
            "label": "writer",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " Revoke permission for the reader of the bucket"
        ],
        "label": "bucket_revoke_reader_perm",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xe9bfed5a"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "label": "node_ids",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 16
            }
          },
          {
            "label": "v_nodes",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 17
            }
          }
        ],
        "docs": [
          " Removes a node to an existing cluster",
          "",
          " The caller will be its first manager."
        ],
        "label": "cluster_remove_node",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x793e0778"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "label": "node_ids",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 16
            }
          },
          {
            "label": "v_nodes",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 17
            }
          }
        ],
        "docs": [
          " Adds node to an existing cluster",
          "",
          " The caller will be its first manager."
        ],
        "label": "cluster_add_node",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xf7496bdc"
      },
      {
        "args": [
          {
            "label": "_unused",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "label": "v_nodes",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 17
            }
          },
          {
            "label": "node_ids",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 16
            }
          },
          {
            "label": "cluster_params",
            "type": {
              "displayName": [
                "ClusterParams"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " Create a new cluster and return its `cluster_id`.",
          "",
          " The caller will be its first manager.",
          "",
          " The cluster is split in a number of vnodes. The vnodes are assigned to the given physical nodes in a round-robin. Only nodes of providers that trust the cluster manager can be used (see `node_trust_manager`). The assignment can be changed with the function `cluster_replace_node`.",
          "",
          " `cluster_params` is configuration used by clients and nodes. In particular, this describes the semantics of vnodes. See the [data structure of ClusterParams](https://docs.cere.network/ddc/protocols/contract-params-schema)"
        ],
        "label": "cluster_create",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 35
        },
        "selector": "0x4c0f21f6"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "label": "amount",
            "type": {
              "displayName": [
                "Resource"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " As manager, reserve more resources for the cluster from the free capacity of nodes.",
          "",
          " The amount of resources is given per vnode (total resources will be `resource` times the number of vnodes)."
        ],
        "label": "cluster_reserve_resource",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xb5e38125"
      },
      {
        "args": [
          {
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          },
          {
            "label": "new_tag",
            "type": {
              "displayName": [
                "NodeTag"
              ],
              "type": 26
            }
          }
        ],
        "docs": [
          " As manager, change a node tag"
        ],
        "label": "cluster_change_node_tag",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x9640d48e"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "label": "v_nodes",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 18
            }
          },
          {
            "label": "new_node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " As manager, re-assign a vnode to another physical node.",
          "",
          " The cluster manager can only use nodes of providers that trust him (see `node_trust_manager`), or any nodes if he is also SuperAdmin."
        ],
        "label": "cluster_replace_node",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x48194ab1"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Trigger the distribution of revenues from the cluster to the providers."
        ],
        "label": "cluster_distribute_revenues",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xe71e66fc"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "label": "params",
            "type": {
              "displayName": [
                "ClusterParams"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " Change the `cluster_params`, which is configuration used by clients and nodes.",
          "",
          " See the [data structure of ClusterParams](https://docs.cere.network/ddc/protocols/contract-params-schema)"
        ],
        "label": "cluster_change_params",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x1207912c"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Get the current status of a cluster."
        ],
        "label": "cluster_get",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 46
        },
        "selector": "0xe75411f5"
      },
      {
        "args": [
          {
            "label": "offset",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "limit",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "filter_manager_id",
            "type": {
              "displayName": [
                "Option"
              ],
              "type": 34
            }
          }
        ],
        "docs": [
          " Iterate through all clusters.",
          "",
          " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
          " The optimal `limit` depends on the size of params.",
          "",
          " The results can be filtered by manager. Note that paging must still be completed fully."
        ],
        "label": "cluster_list",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 49
        },
        "selector": "0xd9db9d44"
      },
      {
        "args": [
          {
            "label": "cdn_node_ids",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 16
            }
          }
        ],
        "docs": [
          " Create a new cluster and return its `cluster_id`.",
          "",
          " The caller will be its first manager.",
          "",
          " The CDN node ids are provided, which will form a cluster."
        ],
        "label": "cdn_cluster_create",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 35
        },
        "selector": "0x4344cd7e"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "label": "usd_per_gb",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 8
            }
          }
        ],
        "docs": [
          " Set rate for streaming (price per gb)"
        ],
        "label": "cdn_set_rate",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x7578922a"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Get rate for streaming (price per gb)"
        ],
        "label": "cdn_get_rate",
        "mutates": false,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 52
        },
        "selector": "0xa1e3ea8a"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          },
          {
            "label": "aggregates_accounts",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 53
            }
          },
          {
            "label": "aggregates_nodes",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 55
            }
          },
          {
            "label": "aggregates_buckets",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 57
            }
          },
          {
            "label": "era",
            "type": {
              "displayName": [
                "u64"
              ],
              "type": 19
            }
          }
        ],
        "docs": [
          " As validator, charge payments from users and allocate undistributed payments to CDN nodes.",
          "",
          " As a result CDN cluster revenue increases, which can be distributed between CDN node providers via method cdn_cluster_distribute_revenues."
        ],
        "label": "cdn_cluster_put_revenue",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x7219be3f"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Trigger the distribution of revenues from the cluster to the CDN node providers.",
          "",
          " Anyone can call this method.",
          "",
          " Undistributed payments will be trasnferred, CDN cluster revenue will decrease."
        ],
        "label": "cdn_cluster_distribute_revenues",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xfa8d570d"
      },
      {
        "args": [
          {
            "label": "cluster_id",
            "type": {
              "displayName": [
                "ClusterId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Get the current status of a cluster."
        ],
        "label": "cdn_cluster_get",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 59
        },
        "selector": "0x4b22fbf1"
      },
      {
        "args": [
          {
            "label": "offset",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "limit",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "filter_manager_id",
            "type": {
              "displayName": [
                "Option"
              ],
              "type": 34
            }
          }
        ],
        "docs": [
          " Iterate through all clusters.",
          "",
          " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
          " The optimal `limit` depends on the size of params.",
          "",
          " The results can be filtered by manager. Note that paging must still be completed fully."
        ],
        "label": "cdn_cluster_list",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 62
        },
        "selector": "0xb242a64f"
      },
      {
        "args": [
          {
            "label": "cdn_owner",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          },
          {
            "label": "commit",
            "type": {
              "displayName": [
                "Commit"
              ],
              "type": 29
            }
          }
        ],
        "docs": [
          " CDN node operator sets the commit for current era."
        ],
        "label": "set_commit",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xe445e1fd"
      },
      {
        "args": [
          {
            "label": "cdn_owner",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " Return the last commit submitted by CDN node operator"
        ],
        "label": "get_commit",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 65
        },
        "selector": "0x5329f551"
      },
      {
        "args": [
          {
            "label": "node",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Return last era validated per CDN node"
        ],
        "label": "get_validated_commit",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 66
        },
        "selector": "0x7d497bc1"
      },
      {
        "args": [
          {
            "label": "era_config",
            "type": {
              "displayName": [
                "EraConfig"
              ],
              "type": 68
            }
          }
        ],
        "docs": [
          " Set the new configs for era"
        ],
        "label": "set_era",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x49a5b8f7"
      },
      {
        "args": [],
        "docs": [
          " Return current status of an era"
        ],
        "label": "get_era",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 69
        },
        "selector": "0x617f696b"
      },
      {
        "args": [],
        "docs": [
          " Return current era settings"
        ],
        "label": "get_era_settings",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 72
        },
        "selector": "0x84b61468"
      },
      {
        "args": [
          {
            "label": "manager",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " As node provider, authorize a cluster manager to use his nodes."
        ],
        "label": "cdn_node_trust_manager",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x372daa96"
      },
      {
        "args": [
          {
            "label": "manager",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " As node provider, revoke the authorization of a cluster manager to use his nodes."
        ],
        "label": "cdn_node_distrust_manager",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xf67f5438"
      },
      {
        "args": [
          {
            "label": "node_params",
            "type": {
              "displayName": [
                "Params"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " Create a new node and return its `node_id`.",
          "",
          " The caller will be its owner.",
          "",
          " `node_params` is configuration used by clients and nodes. In particular, this contains the URL to the service. See the [data structure of NodeParams](https://docs.cere.network/ddc/protocols/contract-params-schema)"
        ],
        "label": "cdn_node_create",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 35
        },
        "selector": "0xe8aa4ade"
      },
      {
        "args": [
          {
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          },
          {
            "label": "params",
            "type": {
              "displayName": [
                "NodeParams"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " Change the `node_params`, which is configuration used by clients and nodes.",
          "",
          " See the [data structure of NodeParams](https://docs.cere.network/ddc/protocols/contract-params-schema)"
        ],
        "label": "cdn_node_change_params",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xf52c20f5"
      },
      {
        "args": [
          {
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Get the current state of the cdn node"
        ],
        "label": "cdn_node_get",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 73
        },
        "selector": "0xf9a5a813"
      },
      {
        "args": [
          {
            "label": "offset",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "limit",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "filter_provider_id",
            "type": {
              "displayName": [
                "Option"
              ],
              "type": 34
            }
          }
        ],
        "docs": [
          " Iterate through all nodes.",
          "",
          " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
          " The optimal `limit` depends on the size of params.",
          "",
          " The results can be filtered by owner. Note that paging must still be completed fully."
        ],
        "label": "cdn_node_list",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 76
        },
        "selector": "0xf8589aae"
      },
      {
        "args": [
          {
            "label": "manager",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " As node provider, authorize a cluster manager to use his nodes."
        ],
        "label": "node_trust_manager",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x6fd54a01"
      },
      {
        "args": [
          {
            "label": "manager",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " As node provider, revoke the authorization of a cluster manager to use his nodes."
        ],
        "label": "node_distrust_manager",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x40912279"
      },
      {
        "args": [
          {
            "label": "rent_per_month",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 8
            }
          },
          {
            "label": "node_params",
            "type": {
              "displayName": [
                "NodeParams"
              ],
              "type": 12
            }
          },
          {
            "label": "capacity",
            "type": {
              "displayName": [
                "Resource"
              ],
              "type": 5
            }
          },
          {
            "label": "node_tag",
            "type": {
              "displayName": [
                "NodeTag"
              ],
              "type": 26
            }
          }
        ],
        "docs": [
          " Create a new node and return its `node_id`.",
          "",
          " The caller will be its owner.",
          "",
          " `node_params` is configuration used by clients and nodes. In particular, this contains the URL to the service. See the [data structure of NodeParams](https://docs.cere.network/ddc/protocols/contract-params-schema)"
        ],
        "label": "node_create",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 35
        },
        "selector": "0xb77ac1bb"
      },
      {
        "args": [
          {
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          },
          {
            "label": "params",
            "type": {
              "displayName": [
                "NodeParams"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " Change the `node_params`, which is configuration used by clients and nodes.",
          "",
          " See the [data structure of NodeParams](https://docs.cere.network/ddc/protocols/contract-params-schema)"
        ],
        "label": "node_change_params",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x258ccb2a"
      },
      {
        "args": [
          {
            "label": "node_id",
            "type": {
              "displayName": [
                "NodeId"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Get the current status of a node."
        ],
        "label": "node_get",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 79
        },
        "selector": "0x847f3997"
      },
      {
        "args": [
          {
            "label": "offset",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "limit",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          },
          {
            "label": "filter_provider_id",
            "type": {
              "displayName": [
                "Option"
              ],
              "type": 34
            }
          }
        ],
        "docs": [
          " Iterate through all nodes.",
          "",
          " The algorithm for paging is: start with `offset = 1` and `limit = 20`. The function returns a `(results, max_id)`. Call again with `offset += limit`, until `offset >= max_id`.",
          " The optimal `limit` depends on the size of params.",
          "",
          " The results can be filtered by owner. Note that paging must still be completed fully."
        ],
        "label": "node_list",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 82
        },
        "selector": "0x423286d6"
      },
      {
        "args": [],
        "docs": [
          " Get the Fee Percentage Basis Points that will be charged by the protocol"
        ],
        "label": "get_fee_bp",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 35
        },
        "selector": "0x0d5daf5f"
      },
      {
        "args": [
          {
            "label": "fee_bp",
            "type": {
              "displayName": [
                "u32"
              ],
              "type": 5
            }
          }
        ],
        "docs": [
          " Return the last commit submitted by CDN node operator"
        ],
        "label": "set_fee_bp",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xc5e3e2ca"
      },
      {
        "args": [],
        "docs": [
          " Return fees accumulated by the protocol"
        ],
        "label": "get_protocol_revenues",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 85
        },
        "selector": "0x07c63885"
      },
      {
        "args": [
          {
            "label": "amount",
            "type": {
              "displayName": [
                "u128"
              ],
              "type": 8
            }
          }
        ],
        "docs": [
          " Pay the revenues accumulated by the protocol"
        ],
        "label": "protocol_withdraw_revenues",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x85c6fa6d"
      },
      {
        "args": [],
        "docs": [
          " As user, deposit tokens on the account of the caller from the transaction value. This deposit",
          " can be used to pay for the services to buckets of the account."
        ],
        "label": "account_deposit",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xc311af62"
      },
      {
        "args": [
          {
            "label": "bond_amount",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 8
            }
          }
        ],
        "docs": [
          " As user, bond some amount of tokens from the withdrawable balance. These funds will be used to pay for CDN node service."
        ],
        "label": "account_bond",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xe9fad0bf"
      },
      {
        "args": [
          {
            "label": "amount_to_unbond",
            "type": {
              "displayName": [
                "Cash"
              ],
              "type": 15
            }
          }
        ],
        "docs": [
          " As user, unbond a specified amount of tokens. The tokens will be locked for some time, as defined by contract owner."
        ],
        "label": "account_unbond",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xf7ea2c67"
      },
      {
        "args": [],
        "docs": [
          " As user, move the unbonded tokens back to withdrawable balance state.",
          "",
          " This can be triggered after unbonded_timestamp"
        ],
        "label": "account_withdraw_unbonded",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x98173716"
      },
      {
        "args": [
          {
            "label": "account_id",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          }
        ],
        "docs": [
          " Get the current status of an account."
        ],
        "label": "account_get",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 86
        },
        "selector": "0x1d4220fa"
      },
      {
        "args": [],
        "docs": [
          " Get the current conversion rate between the native currency and an external currency (USD)."
        ],
        "label": "account_get_usd_per_cere",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 52
        },
        "selector": "0xe4a4652a"
      },
      {
        "args": [
          {
            "label": "usd_per_cere",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 8
            }
          }
        ],
        "docs": [
          " As price oracle, set the current conversion rate between the native currency and an external currency (USD).",
          "",
          " This requires the permission SetExchangeRate or SuperAdmin."
        ],
        "label": "account_set_usd_per_cere",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x48d45ee8"
      },
      {
        "args": [
          {
            "label": "grantee",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "label": "permission",
            "type": {
              "displayName": [
                "Permission"
              ],
              "type": 89
            }
          }
        ],
        "docs": [
          " Check whether the given account has the given permission currently,",
          " or the SuperAdmin permission."
        ],
        "label": "has_permission",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 90
        },
        "selector": "0xe0942492"
      },
      {
        "args": [
          {
            "label": "grantee",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "label": "permission",
            "type": {
              "displayName": [
                "Permission"
              ],
              "type": 89
            }
          }
        ],
        "docs": [
          " As SuperAdmin, grant any permission to any account."
        ],
        "label": "admin_grant_permission",
        "mutates": true,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0xbe41ea55"
      },
      {
        "args": [
          {
            "label": "grantee",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 2
            }
          },
          {
            "label": "permission",
            "type": {
              "displayName": [
                "Permission"
              ],
              "type": 89
            }
          }
        ],
        "docs": [
          " As SuperAdmin, revoke any permission to any account."
        ],
        "label": "admin_revoke_permission",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x6b150666"
      },
      {
        "args": [
          {
            "label": "amount",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 8
            }
          }
        ],
        "docs": [
          " As SuperAdmin, withdraw the funds held in custody in this contract.",
          "",
          " This is a temporary measure to allow migrating the funds to a new version of the contract."
        ],
        "label": "admin_withdraw",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x2f6e0868"
      },
      {
        "args": [
          {
            "label": "config",
            "type": {
              "displayName": [
                "FeeConfig"
              ],
              "type": 91
            }
          }
        ],
        "docs": [
          " As SuperAdmin, set the network and cluster fee configuration."
        ],
        "label": "admin_set_fee_config",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 31
        },
        "selector": "0x00d441e7"
      },
      {
        "args": [],
        "docs": [
          " Get all Account IDs stored in the SC"
        ],
        "label": "get_accounts",
        "mutates": false,
        "payable": true,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 45
        },
        "selector": "0xef03ead7"
      }
    ]
  },
  "storage": {
    "root": {
      "layout": {
        "struct": {
          "fields": [
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 0
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "BucketStore"
                }
              },
              "name": "buckets"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "root": {
                          "layout": {
                            "leaf": {
                              "key": "0x5507d9ed",
                              "ty": 10
                            }
                          },
                          "root_key": "0x5507d9ed"
                        }
                      },
                      "name": "writers"
                    },
                    {
                      "layout": {
                        "root": {
                          "layout": {
                            "leaf": {
                              "key": "0xef202b35",
                              "ty": 10
                            }
                          },
                          "root_key": "0xef202b35"
                        }
                      },
                      "name": "readers"
                    }
                  ],
                  "name": "BucketsPermsStore"
                }
              },
              "name": "buckets_perms"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 11
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "ParamsStore"
                }
              },
              "name": "bucket_params"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 13
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "ClusterStore"
                }
              },
              "name": "clusters"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 20
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "CdnClusterStore"
                }
              },
              "name": "cdn_clusters"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 11
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "ParamsStore"
                }
              },
              "name": "cluster_params"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 22
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "CdnNodeStore"
                }
              },
              "name": "cdn_nodes"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 11
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "ParamsStore"
                }
              },
              "name": "cdn_node_params"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 24
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "NodeStore"
                }
              },
              "name": "nodes"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 11
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "ParamsStore"
                }
              },
              "name": "node_params"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "root": {
                          "layout": {
                            "struct": {
                              "fields": [
                                {
                                  "layout": {
                                    "struct": {
                                      "fields": [
                                        {
                                          "layout": {
                                            "leaf": {
                                              "key": "0xa1f097d3",
                                              "ty": 8
                                            }
                                          },
                                          "name": "0"
                                        }
                                      ],
                                      "name": "Cash"
                                    }
                                  },
                                  "name": "deposit"
                                },
                                {
                                  "layout": {
                                    "struct": {
                                      "fields": [
                                        {
                                          "layout": {
                                            "leaf": {
                                              "key": "0xa1f097d3",
                                              "ty": 8
                                            }
                                          },
                                          "name": "0"
                                        }
                                      ],
                                      "name": "Cash"
                                    }
                                  },
                                  "name": "bonded"
                                },
                                {
                                  "layout": {
                                    "struct": {
                                      "fields": [
                                        {
                                          "layout": {
                                            "leaf": {
                                              "key": "0xa1f097d3",
                                              "ty": 8
                                            }
                                          },
                                          "name": "0"
                                        }
                                      ],
                                      "name": "Cash"
                                    }
                                  },
                                  "name": "negative"
                                },
                                {
                                  "layout": {
                                    "struct": {
                                      "fields": [
                                        {
                                          "layout": {
                                            "leaf": {
                                              "key": "0xa1f097d3",
                                              "ty": 8
                                            }
                                          },
                                          "name": "0"
                                        }
                                      ],
                                      "name": "Cash"
                                    }
                                  },
                                  "name": "unbonded_amount"
                                },
                                {
                                  "layout": {
                                    "leaf": {
                                      "key": "0xa1f097d3",
                                      "ty": 19
                                    }
                                  },
                                  "name": "unbonded_timestamp"
                                },
                                {
                                  "layout": {
                                    "struct": {
                                      "fields": [
                                        {
                                          "layout": {
                                            "leaf": {
                                              "key": "0xa1f097d3",
                                              "ty": 8
                                            }
                                          },
                                          "name": "rate"
                                        },
                                        {
                                          "layout": {
                                            "leaf": {
                                              "key": "0xa1f097d3",
                                              "ty": 8
                                            }
                                          },
                                          "name": "offset"
                                        }
                                      ],
                                      "name": "Schedule"
                                    }
                                  },
                                  "name": "payable_schedule"
                                }
                              ],
                              "name": "Account"
                            }
                          },
                          "root_key": "0xa1f097d3"
                        }
                      },
                      "name": "0"
                    },
                    {
                      "layout": {
                        "struct": {
                          "fields": [
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 8
                                }
                              },
                              "name": "0"
                            }
                          ],
                          "name": "CurrencyConverter"
                        }
                      },
                      "name": "1"
                    },
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 10
                        }
                      },
                      "name": "2"
                    }
                  ],
                  "name": "AccountStore"
                }
              },
              "name": "accounts"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "root": {
                          "layout": {
                            "leaf": {
                              "key": "0xcd7703f0",
                              "ty": 9
                            }
                          },
                          "root_key": "0xcd7703f0"
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "PermStore"
                }
              },
              "name": "perms"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "struct": {
                          "fields": [
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 8
                                }
                              },
                              "name": "network_fee_bp"
                            },
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 2
                                }
                              },
                              "name": "network_fee_destination"
                            },
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 8
                                }
                              },
                              "name": "cluster_management_fee_bp"
                            }
                          ],
                          "name": "FeeConfig"
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "NetworkFeeStore"
                }
              },
              "name": "network_fee"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 2
                        }
                      },
                      "name": "operator_id"
                    },
                    {
                      "layout": {
                        "root": {
                          "layout": {
                            "leaf": {
                              "key": "0x804f8320",
                              "ty": 27
                            }
                          },
                          "root_key": "0x804f8320"
                        }
                      },
                      "name": "commits"
                    },
                    {
                      "layout": {
                        "root": {
                          "layout": {
                            "struct": {
                              "fields": [
                                {
                                  "layout": {
                                    "leaf": {
                                      "key": "0x50469c9a",
                                      "ty": 19
                                    }
                                  },
                                  "name": "0"
                                },
                                {
                                  "layout": {
                                    "leaf": {
                                      "key": "0x50469c9a",
                                      "ty": 19
                                    }
                                  },
                                  "name": "1"
                                }
                              ],
                              "name": "(A, B)"
                            }
                          },
                          "root_key": "0x50469c9a"
                        }
                      },
                      "name": "validated_commits"
                    },
                    {
                      "layout": {
                        "struct": {
                          "fields": [
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 19
                                }
                              },
                              "name": "start"
                            },
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 19
                                }
                              },
                              "name": "interval"
                            },
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 19
                                }
                              },
                              "name": "commit_duration"
                            },
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 19
                                }
                              },
                              "name": "validation_duration"
                            }
                          ],
                          "name": "EraConfig"
                        }
                      },
                      "name": "era_settings"
                    }
                  ],
                  "name": "CommitterStore"
                }
              },
              "name": "committer_store"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 2
                        }
                      },
                      "name": "admin"
                    },
                    {
                      "layout": {
                        "leaf": {
                          "key": "0x00000000",
                          "ty": 5
                        }
                      },
                      "name": "fee_bp"
                    },
                    {
                      "layout": {
                        "struct": {
                          "fields": [
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 8
                                }
                              },
                              "name": "0"
                            }
                          ],
                          "name": "Cash"
                        }
                      },
                      "name": "revenues"
                    }
                  ],
                  "name": "ProtocolStore"
                }
              },
              "name": "protocol_store"
            },
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "root": {
                          "layout": {
                            "leaf": {
                              "key": "0x09999189",
                              "ty": 5
                            }
                          },
                          "root_key": "0x09999189"
                        }
                      },
                      "name": "0"
                    }
                  ],
                  "name": "TopologyStore"
                }
              },
              "name": "topology_store"
            }
          ],
          "name": "DdcBucket"
        }
      },
      "root_key": "0x00000000"
    }
  },
  "types": [
    {
      "id": 0,
      "type": {
        "def": {
          "sequence": {
            "type": 1
          }
        }
      }
    },
    {
      "id": 1,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "owner_id",
                "type": 2,
                "typeName": "AccountId"
              },
              {
                "name": "cluster_id",
                "type": 5,
                "typeName": "ClusterId"
              },
              {
                "name": "flow",
                "type": 6,
                "typeName": "Flow"
              },
              {
                "name": "resource_reserved",
                "type": 5,
                "typeName": "Resource"
              },
              {
                "name": "public_availability",
                "type": 9,
                "typeName": "bool"
              },
              {
                "name": "resource_consumption_cap",
                "type": 5,
                "typeName": "Resource"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "bucket",
          "entity",
          "Bucket"
        ]
      }
    },
    {
      "id": 2,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 3,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "types",
          "AccountId"
        ]
      }
    },
    {
      "id": 3,
      "type": {
        "def": {
          "array": {
            "len": 32,
            "type": 4
          }
        }
      }
    },
    {
      "id": 4,
      "type": {
        "def": {
          "primitive": "u8"
        }
      }
    },
    {
      "id": 5,
      "type": {
        "def": {
          "primitive": "u32"
        }
      }
    },
    {
      "id": 6,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "from",
                "type": 2,
                "typeName": "AccountId"
              },
              {
                "name": "schedule",
                "type": 7,
                "typeName": "Schedule"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "flow",
          "Flow"
        ]
      }
    },
    {
      "id": 7,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "rate",
                "type": 8,
                "typeName": "Balance"
              },
              {
                "name": "offset",
                "type": 8,
                "typeName": "Balance"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "schedule",
          "Schedule"
        ]
      }
    },
    {
      "id": 8,
      "type": {
        "def": {
          "primitive": "u128"
        }
      }
    },
    {
      "id": 9,
      "type": {
        "def": {
          "primitive": "bool"
        }
      }
    },
    {
      "id": 10,
      "type": {
        "def": {
          "sequence": {
            "type": 2
          }
        }
      }
    },
    {
      "id": 11,
      "type": {
        "def": {
          "sequence": {
            "type": 12
          }
        }
      }
    },
    {
      "id": 12,
      "type": {
        "def": {
          "primitive": "str"
        }
      }
    },
    {
      "id": 13,
      "type": {
        "def": {
          "sequence": {
            "type": 14
          }
        }
      }
    },
    {
      "id": 14,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "manager_id",
                "type": 2,
                "typeName": "AccountId"
              },
              {
                "name": "resource_per_vnode",
                "type": 5,
                "typeName": "Resource"
              },
              {
                "name": "resource_used",
                "type": 5,
                "typeName": "Resource"
              },
              {
                "name": "revenues",
                "type": 15,
                "typeName": "Cash"
              },
              {
                "name": "node_ids",
                "type": 16,
                "typeName": "Vec<NodeId>"
              },
              {
                "name": "v_nodes",
                "type": 17,
                "typeName": "Vec<Vec<u64>>"
              },
              {
                "name": "total_rent",
                "type": 8,
                "typeName": "Balance"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "cluster",
          "entity",
          "Cluster"
        ]
      }
    },
    {
      "id": 15,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "value",
                "type": 8,
                "typeName": "Balance"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "cash",
          "Cash"
        ]
      }
    },
    {
      "id": 16,
      "type": {
        "def": {
          "sequence": {
            "type": 5
          }
        }
      }
    },
    {
      "id": 17,
      "type": {
        "def": {
          "sequence": {
            "type": 18
          }
        }
      }
    },
    {
      "id": 18,
      "type": {
        "def": {
          "sequence": {
            "type": 19
          }
        }
      }
    },
    {
      "id": 19,
      "type": {
        "def": {
          "primitive": "u64"
        }
      }
    },
    {
      "id": 20,
      "type": {
        "def": {
          "sequence": {
            "type": 21
          }
        }
      }
    },
    {
      "id": 21,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "manager_id",
                "type": 2,
                "typeName": "AccountId"
              },
              {
                "name": "cdn_nodes",
                "type": 16,
                "typeName": "Vec<NodeId>"
              },
              {
                "name": "resources_used",
                "type": 5,
                "typeName": "Resource"
              },
              {
                "name": "revenues",
                "type": 15,
                "typeName": "Cash"
              },
              {
                "name": "usd_per_gb",
                "type": 8,
                "typeName": "Balance"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "cdn_cluster",
          "entity",
          "CdnCluster"
        ]
      }
    },
    {
      "id": 22,
      "type": {
        "def": {
          "sequence": {
            "type": 23
          }
        }
      }
    },
    {
      "id": 23,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "provider_id",
                "type": 2,
                "typeName": "ProviderId"
              },
              {
                "name": "undistributed_payment",
                "type": 8,
                "typeName": "Balance"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "cdn_node",
          "entity",
          "CdnNode"
        ]
      }
    },
    {
      "id": 24,
      "type": {
        "def": {
          "sequence": {
            "type": 25
          }
        }
      }
    },
    {
      "id": 25,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "provider_id",
                "type": 2,
                "typeName": "ProviderId"
              },
              {
                "name": "rent_per_month",
                "type": 8,
                "typeName": "Balance"
              },
              {
                "name": "free_resource",
                "type": 5,
                "typeName": "Resource"
              },
              {
                "name": "node_tag",
                "type": 26,
                "typeName": "NodeTag"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "node",
          "entity",
          "Node"
        ]
      }
    },
    {
      "id": 26,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 0,
                "name": "ACTIVE"
              },
              {
                "index": 1,
                "name": "ADDING"
              },
              {
                "index": 2,
                "name": "DELETING"
              },
              {
                "index": 3,
                "name": "OFFLINE"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "node",
          "entity",
          "NodeTag"
        ]
      }
    },
    {
      "id": 27,
      "type": {
        "def": {
          "sequence": {
            "type": 28
          }
        }
      }
    },
    {
      "id": 28,
      "type": {
        "def": {
          "tuple": [
            5,
            29
          ]
        }
      }
    },
    {
      "id": 29,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "hash",
                "type": 30,
                "typeName": "Hash"
              },
              {
                "name": "total_logs",
                "type": 8,
                "typeName": "u128"
              },
              {
                "name": "from_timestamp",
                "type": 19,
                "typeName": "u64"
              },
              {
                "name": "to_timestamp",
                "type": 19,
                "typeName": "u64"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "committer",
          "store",
          "Commit"
        ]
      }
    },
    {
      "id": 30,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 3,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "types",
          "Hash"
        ]
      }
    },
    {
      "id": 31,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 32
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 32
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 32,
      "type": {
        "def": {
          "tuple": []
        }
      }
    },
    {
      "id": 33,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 1,
                "name": "CouldNotReadInput"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "LangError"
        ]
      }
    },
    {
      "id": 34,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 0,
                "name": "None"
              },
              {
                "fields": [
                  {
                    "type": 2
                  }
                ],
                "index": 1,
                "name": "Some"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 2
          }
        ],
        "path": [
          "Option"
        ]
      }
    },
    {
      "id": 35,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 5
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 5
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 36,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 37
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 37
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 37,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 38
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 40
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 38
          },
          {
            "name": "E",
            "type": 40
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 38,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "bucket_id",
                "type": 5,
                "typeName": "BucketId"
              },
              {
                "name": "bucket",
                "type": 39,
                "typeName": "BucketInStatus"
              },
              {
                "name": "params",
                "type": 12,
                "typeName": "BucketParams"
              },
              {
                "name": "writer_ids",
                "type": 10,
                "typeName": "Vec<AccountId>"
              },
              {
                "name": "reader_ids",
                "type": 10,
                "typeName": "Vec<AccountId>"
              },
              {
                "name": "rent_covered_until_ms",
                "type": 19,
                "typeName": "u64"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "bucket",
          "entity",
          "BucketStatus"
        ]
      }
    },
    {
      "id": 39,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "owner_id",
                "type": 2,
                "typeName": "AccountId"
              },
              {
                "name": "cluster_id",
                "type": 5,
                "typeName": "ClusterId"
              },
              {
                "name": "resource_reserved",
                "type": 5,
                "typeName": "Resource"
              },
              {
                "name": "public_availability",
                "type": 9,
                "typeName": "bool"
              },
              {
                "name": "resource_consumption_cap",
                "type": 5,
                "typeName": "Resource"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "bucket",
          "entity",
          "BucketInStatus"
        ]
      }
    },
    {
      "id": 40,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 0,
                "name": "BucketDoesNotExist"
              },
              {
                "index": 1,
                "name": "ClusterDoesNotExist"
              },
              {
                "index": 2,
                "name": "ParamsTooBig"
              },
              {
                "index": 3,
                "name": "VNodeDoesNotExist"
              },
              {
                "index": 4,
                "name": "BondingPeriodNotFinished"
              },
              {
                "index": 5,
                "name": "BucketClusterAlreadyConnected"
              },
              {
                "index": 6,
                "name": "BucketClusterNotSetup"
              },
              {
                "index": 7,
                "name": "NodeDoesNotExist"
              },
              {
                "index": 8,
                "name": "FlowDoesNotExist"
              },
              {
                "index": 9,
                "name": "AccountDoesNotExist"
              },
              {
                "index": 10,
                "name": "ParamsDoesNotExist"
              },
              {
                "index": 11,
                "name": "UnauthorizedProvider"
              },
              {
                "index": 12,
                "name": "UnauthorizedOwner"
              },
              {
                "index": 13,
                "name": "UnauthorizedClusterManager"
              },
              {
                "index": 14,
                "name": "ClusterManagerIsNotTrusted"
              },
              {
                "index": 15,
                "name": "TransferFailed"
              },
              {
                "index": 16,
                "name": "InsufficientBalance"
              },
              {
                "index": 17,
                "name": "InsufficientResources"
              },
              {
                "index": 18,
                "name": "Unauthorized"
              },
              {
                "index": 19,
                "name": "UnknownNode"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "Error"
        ]
      }
    },
    {
      "id": 41,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 42
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 42
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 42,
      "type": {
        "def": {
          "tuple": [
            43,
            5
          ]
        }
      }
    },
    {
      "id": 43,
      "type": {
        "def": {
          "sequence": {
            "type": 38
          }
        }
      }
    },
    {
      "id": 44,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 0
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 0
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 45,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 10
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 10
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 46,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 47
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 47
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 47,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 48
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 40
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 48
          },
          {
            "name": "E",
            "type": 40
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 48,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "cluster_id",
                "type": 5,
                "typeName": "ClusterId"
              },
              {
                "name": "cluster",
                "type": 14,
                "typeName": "Cluster"
              },
              {
                "name": "params",
                "type": 12,
                "typeName": "Params"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "cluster",
          "entity",
          "ClusterStatus"
        ]
      }
    },
    {
      "id": 49,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 50
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 50
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 50,
      "type": {
        "def": {
          "tuple": [
            51,
            5
          ]
        }
      }
    },
    {
      "id": 51,
      "type": {
        "def": {
          "sequence": {
            "type": 48
          }
        }
      }
    },
    {
      "id": 52,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 8
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 8
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 53,
      "type": {
        "def": {
          "sequence": {
            "type": 54
          }
        }
      }
    },
    {
      "id": 54,
      "type": {
        "def": {
          "tuple": [
            2,
            8
          ]
        }
      }
    },
    {
      "id": 55,
      "type": {
        "def": {
          "sequence": {
            "type": 56
          }
        }
      }
    },
    {
      "id": 56,
      "type": {
        "def": {
          "tuple": [
            5,
            8
          ]
        }
      }
    },
    {
      "id": 57,
      "type": {
        "def": {
          "sequence": {
            "type": 58
          }
        }
      }
    },
    {
      "id": 58,
      "type": {
        "def": {
          "tuple": [
            5,
            5
          ]
        }
      }
    },
    {
      "id": 59,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 60
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 60
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 60,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 61
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 40
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 61
          },
          {
            "name": "E",
            "type": 40
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 61,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "cluster_id",
                "type": 5,
                "typeName": "ClusterId"
              },
              {
                "name": "cluster",
                "type": 21,
                "typeName": "CdnCluster"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "cdn_cluster",
          "entity",
          "CdnClusterStatus"
        ]
      }
    },
    {
      "id": 62,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 63
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 63
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 63,
      "type": {
        "def": {
          "tuple": [
            64,
            5
          ]
        }
      }
    },
    {
      "id": 64,
      "type": {
        "def": {
          "sequence": {
            "type": 61
          }
        }
      }
    },
    {
      "id": 65,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 27
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 27
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 66,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 67
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 67
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 67,
      "type": {
        "def": {
          "tuple": [
            19,
            19
          ]
        }
      }
    },
    {
      "id": 68,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "start",
                "type": 19,
                "typeName": "u64"
              },
              {
                "name": "interval",
                "type": 19,
                "typeName": "u64"
              },
              {
                "name": "commit_duration",
                "type": 19,
                "typeName": "u64"
              },
              {
                "name": "validation_duration",
                "type": 19,
                "typeName": "u64"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "committer",
          "store",
          "EraConfig"
        ]
      }
    },
    {
      "id": 69,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 70
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 70
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 70,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "current_era",
                "type": 19,
                "typeName": "u64"
              },
              {
                "name": "current_phase",
                "type": 71,
                "typeName": "Phase"
              },
              {
                "name": "previous_era",
                "type": 19,
                "typeName": "u64"
              },
              {
                "name": "prev_era_from_timestamp",
                "type": 19,
                "typeName": "u64"
              },
              {
                "name": "prev_era_to_timestamp",
                "type": 19,
                "typeName": "u64"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "committer",
          "store",
          "EraStatus"
        ]
      }
    },
    {
      "id": 71,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 0,
                "name": "Commit"
              },
              {
                "index": 1,
                "name": "Valiadation"
              },
              {
                "index": 2,
                "name": "Payout"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "committer",
          "store",
          "Phase"
        ]
      }
    },
    {
      "id": 72,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 68
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 68
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 73,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 74
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 74
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 74,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 75
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 40
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 75
          },
          {
            "name": "E",
            "type": 40
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 75,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "node_id",
                "type": 5,
                "typeName": "NodeId"
              },
              {
                "name": "node",
                "type": 23,
                "typeName": "CdnNode"
              },
              {
                "name": "params",
                "type": 12,
                "typeName": "Params"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "cdn_node",
          "entity",
          "CdnNodeStatus"
        ]
      }
    },
    {
      "id": 76,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 77
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 77
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 77,
      "type": {
        "def": {
          "tuple": [
            78,
            5
          ]
        }
      }
    },
    {
      "id": 78,
      "type": {
        "def": {
          "sequence": {
            "type": 75
          }
        }
      }
    },
    {
      "id": 79,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 80
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 80
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 80,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 81
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 40
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 81
          },
          {
            "name": "E",
            "type": 40
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 81,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "node_id",
                "type": 5,
                "typeName": "NodeId"
              },
              {
                "name": "node",
                "type": 25,
                "typeName": "Node"
              },
              {
                "name": "params",
                "type": 12,
                "typeName": "Params"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "node",
          "entity",
          "NodeStatus"
        ]
      }
    },
    {
      "id": 82,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 83
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 83
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 83,
      "type": {
        "def": {
          "tuple": [
            84,
            5
          ]
        }
      }
    },
    {
      "id": 84,
      "type": {
        "def": {
          "sequence": {
            "type": 81
          }
        }
      }
    },
    {
      "id": 85,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 15
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 15
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 86,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 87
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 87
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 87,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 88
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 40
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 88
          },
          {
            "name": "E",
            "type": 40
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 88,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "deposit",
                "type": 15,
                "typeName": "Cash"
              },
              {
                "name": "bonded",
                "type": 15,
                "typeName": "Cash"
              },
              {
                "name": "negative",
                "type": 15,
                "typeName": "Cash"
              },
              {
                "name": "unbonded_amount",
                "type": 15,
                "typeName": "Cash"
              },
              {
                "name": "unbonded_timestamp",
                "type": 19,
                "typeName": "u64"
              },
              {
                "name": "payable_schedule",
                "type": 7,
                "typeName": "Schedule"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "account",
          "entity",
          "Account"
        ]
      }
    },
    {
      "id": 89,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 2,
                    "typeName": "AccountId"
                  }
                ],
                "index": 0,
                "name": "ManagerTrustedBy"
              },
              {
                "index": 1,
                "name": "SetExchangeRate"
              },
              {
                "index": 2,
                "name": "SuperAdmin"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "perm",
          "entity",
          "Permission"
        ]
      }
    },
    {
      "id": 90,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 9
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 33
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 9
          },
          {
            "name": "E",
            "type": 33
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 91,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "network_fee_bp",
                "type": 8,
                "typeName": "BasisPoints"
              },
              {
                "name": "network_fee_destination",
                "type": 2,
                "typeName": "AccountId"
              },
              {
                "name": "cluster_management_fee_bp",
                "type": 8,
                "typeName": "BasisPoints"
              }
            ]
          }
        },
        "path": [
          "ddc_bucket",
          "ddc_bucket",
          "network_fee",
          "FeeConfig"
        ]
      }
    }
  ],
  "version": "4"
}